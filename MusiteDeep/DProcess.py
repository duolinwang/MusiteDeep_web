import string

import re
import pandas as pd
import numpy as np

import keras.utils.np_utils as kutils

def convertSampleToProbMatr(sampleSeq3DArr): #changed add one column for '1'
    """
    Convertd the raw data to probability matrix
    
    PARAMETER
    ---------
    sampleSeq3DArr: 3D numpy array
       X denoted the unknow amino acid.
    
    
    probMatr: Probability Matrix for Samples. Shape (nb_samples, 1, nb_length_of_sequence, nb_AA)
    """
    
    letterDict = {}
    letterDict["A"] = 0
    letterDict["C"] = 1
    letterDict["D"] = 2
    letterDict["E"] = 3
    letterDict["F"] = 4
    letterDict["G"] = 5
    letterDict["H"] = 6
    letterDict["I"] = 7
    letterDict["K"] = 8
    letterDict["L"] = 9
    letterDict["M"] = 10
    letterDict["N"] = 11
    letterDict["P"] = 12
    letterDict["Q"] = 13
    letterDict["R"] = 14
    letterDict["S"] = 15
    letterDict["T"] = 16
    letterDict["V"] = 17
    letterDict["W"] = 18
    letterDict["Y"] = 19
    letterDict["-"] =20 ##add -
    AACategoryLen = 21 ##add -
    
    probMatr = np.zeros((len(sampleSeq3DArr), 1, len(sampleSeq3DArr[0]), AACategoryLen))
    
    
    sampleNo = 0
    for sequence in sampleSeq3DArr:
    
        AANo	 = 0
        for AA in sequence:
            
            if not AA in letterDict:
                probMatr[sampleNo][0][AANo] = np.full((1,AACategoryLen), 1.0/AACategoryLen)
            
            else:
                index = letterDict[AA]
                probMatr[sampleNo][0][AANo][index] = 1
                
            AANo += 1
        sampleNo += 1
    
    return probMatr
    


def convertSampleToIndex(sampleSeq3DArr):
	"""
	Convertd the raw data to probability matrix
	
	PARAMETER
	---------
	sampleSeq3DArr: 3D numpy array
		X denoted the unknow amino acid.
	
	
	probMatr: Probability Matrix for Samples. Shape (nb_samples, 1, nb_length_of_sequence, nb_AA)
	"""
	
	letterDict = {}
	letterDict["A"] = 1
	letterDict["C"] = 2
	letterDict["D"] = 3
	letterDict["E"] = 4
	letterDict["F"] = 5
	letterDict["G"] = 6
	letterDict["H"] = 7
	letterDict["I"] = 8
	letterDict["K"] = 9
	letterDict["L"] = 10
	letterDict["M"] = 11
	letterDict["N"] = 12
	letterDict["P"] = 13
	letterDict["Q"] = 14
	letterDict["R"] = 15
	letterDict["S"] = 16
	letterDict["T"] = 17
	letterDict["V"] = 18
	letterDict["W"] = 19
	letterDict["Y"] = 20
	letterDict["-"] = 21
	letterDict["X"] = 0
	probMatr = np.zeros((len(sampleSeq3DArr),len(sampleSeq3DArr[0])))
	
	sampleNo = 0
	for sequence in sampleSeq3DArr:
		AANo	 = 0
		for AA in sequence:
			probMatr[sampleNo][AANo]= letterDict[AA]
			AANo += 1
		sampleNo += 1
	
	return probMatr
	

	
def convertSampleToVector2DList(sampleSeq3DArr, nb_windows, refMatrFileName):
	"""
	Convertd the raw data to probability matrix
	PARAMETER
	---------
	sampleSeq3DArr: 3D List
		List -  numpy matrix(3D)
	Sample List: List (nb_windows, nb_samples, SEQLen/nb_windows , 100)
	"""
	
	rawDataFrame = pd.read_table(refMatrFileName, sep='\t', header=None)
	
	raw_data_seq_index_df = pd.DataFrame({'seq' : rawDataFrame[0] , 'indexing':rawDataFrame.index})
	raw_data_seq_df_index_dict = raw_data_seq_index_df.set_index('seq')['indexing'].to_dict()

	
	nb_raw_data_frame_column = len(rawDataFrame.columns)
	
	nb_sample = sampleSeq3DArr.shape[0]
	len_seq = len(sampleSeq3DArr[1]) 
	re_statement =  ".{%d}" % (nb_windows)
	
	
	probMatr_list = []
	for tmp_idx in range(nb_windows):
		probMatr_list.append( np.zeros((nb_sample, int((len_seq - tmp_idx)/nb_windows) , 100)) )

	
	for sample_index, sample_sequence in enumerate(sampleSeq3DArr):
		
		if sample_index%10000 == 0:
			print( "%d / %d " % (sample_index, nb_sample))
		
		#start_time = time.time()
		seq = "".join(sample_sequence)
		
		for begin_idx in range(nb_windows):
			
			# Get sub-sequence
			sub_seq_list = re.findall(re_statement, seq[begin_idx:])
			
			sub_seq_indexing_list = []
			for sub_seq in sub_seq_list:
				if sub_seq in raw_data_seq_df_index_dict:
					sub_seq_indexing_list.append( raw_data_seq_df_index_dict[sub_seq] )
				else:
					sub_seq_indexing_list.append( raw_data_seq_df_index_dict['<unk>'] )

			matrix_arr = rawDataFrame.loc[ sub_seq_indexing_list ][ range(1, nb_raw_data_frame_column)].as_matrix()
			for idx_i in range(matrix_arr.shape[0]):
				for idx_j in range(matrix_arr.shape[1]):
					probMatr_list[begin_idx][sample_index][idx_i][idx_j] = matrix_arr[idx_i][idx_j]

		#print("2. --- %s seconds ---" % (time.time() - start_time))
		

	return probMatr_list

def convertSampleToPhysicsVector(sampleSeq3DArr): #from wulihuaxueshuxing.txt 
	"""
	Convertd the raw data to physico-chemical property
	
	PARAMETER
	---------
	sampleSeq3DArr: 3D numpy array
		X denoted the unknow amino acid.
	
	
	probMatr: Probability Matrix for Samples. Shape (nb_samples, 1, nb_length_of_sequence, nb_AA)
	"""
	
	letterDict = {} #hydrophobicty, hydrophilicity, side-chain mass, pK1 (alpha-COOH), pK2 (NH3), PI, Average volume of buried residue, Molecular weight, Side chain volume, Mean polarity
	letterDict["A"] = [0.62,	-0.5,	15,	2.35,	9.87,	6.11,	91.5,	89.09,	27.5,	-0.06]
	letterDict["C"] = [0.2900,	-1.0000,	47.0000,    1.7100,   10.7800,    5.0200,	117.7,	121.15,	44.6,	1.36]
	letterDict["D"] = [-0.9000,    3.0000,   59.0000,    1.8800,    9.6000,    2.9800,	124.5,	133.1,	40,	-0.8]
	letterDict["E"] = [-0.7400,    3.0000,   73.0000,    2.1900,    9.6700,    3.0800,	155.1,	147.13,	62,	-0.77]
	letterDict["F"] = [1.1900,   -2.5000,   91.0000,    2.5800,    9.2400,    5.9100,	203.4,	165.19,	115.5,	1.27]
	letterDict["G"] = [0.4800,         0,    1.0000,    2.3400,    9.6000,    6.0600,	66.4,	75.07,	0,	-0.41]
	letterDict["H"] = [-0.4000,   -0.5000,   82.0000,    1.7800,    8.9700,    7.6400,	167.3,	155.16,	79,	0.49]
	letterDict["I"] = [1.3800,   -1.8000,   57.0000,    2.3200,    9.7600,    6.0400,	168.8,	131.17,	93.5,	1.31]
	letterDict["K"] = [-1.5000,    3.0000,   73.0000,    2.2000,    8.9000,    9.4700,	171.3,	146.19,	100,	-1.18]
	letterDict["L"] = [1.0600,   -1.8000,   57.0000,    2.3600,    9.6000,    6.0400,	167.9,	131.17,	93.5,	1.21]
	letterDict["M"] = [0.6400,   -1.3000,   75.0000,    2.2800,    9.2100,    5.7400,	170.8,	149.21,	94.1,	1.27]
	letterDict["N"] = [-0.7800,    0.2000,   58.0000,    2.1800,    9.0900,   10.7600,	135.2,	132.12,	58.7,	-0.48]
	letterDict["P"] = [0.1200,         0,   42.0000,    1.9900,   10.6000,    6.3000,	129.3,	115.13,	41.9,	0]
	letterDict["Q"] = [-0.8500,    0.2000,   72.0000,    2.1700,    9.1300,    5.6500,	161.1,	146.15,	80.7,	-0.73]
	letterDict["R"] = [-2.5300,    3.0000,  101.0000,    2.1800,    9.0900,   10.7600,	202,	174.2,	105,	-0.84]
	letterDict["S"] = [-0.1800,    0.3000,   31.0000,    2.2100,    9.1500,    5.6800,	99.1,	105.09,	29.3,	-0.5]
	letterDict["T"] = [-0.0500,   -0.4000,   45.0000,    2.1500,    9.1200,    5.6000,	122.1,	119.12,	51.3,	-0.27]	
	letterDict["V"] = [1.0800,   -1.5000,   43.0000,    2.2900,    9.7400,    6.0200,	141.7,	117.15,	71.5,	1.09]
	letterDict["W"] = [0.8100,   -3.4000,  130.0000,    2.3800,    9.3900,    5.8800,	237.6,	204.24,	145.5,	0.88]
	letterDict["Y"] = [0.2600,   -2.3000,  107.0000,    2.2000,    9.1100,    5.6300,	203.6,	181.19,	117.3,	0.33]
	AACategoryLen = 10
	
	probMatr = np.zeros((len(sampleSeq3DArr), 1, len(sampleSeq3DArr[0]), AACategoryLen))
	
	
	sampleNo = 0
	for sequence in sampleSeq3DArr:
	
		AANo	 = 0
		for AA in sequence:
			
			if not AA in letterDict:
				probMatr[sampleNo][0][AANo] = np.full((1,AACategoryLen), 0)
			
			else:
				probMatr[sampleNo][0][AANo]= letterDict[AA]
				
			AANo += 1
		sampleNo += 1
	
	return probMatr

def convertSampleToPhysicsVector_3(sampleSeq3DArr):
	"""
	Convertd the raw data to physico-chemical property
	
	PARAMETER
	---------
	sampleSeq3DArr: 3D numpy array
		X denoted the unknow amino acid.
	
	
	probMatr: Probability Matrix for Samples. Shape (nb_samples, 1, nb_length_of_sequence, nb_AA)
	"""
	
	letterDict = {} 
	letterDict["A"] = [0.8056266,0.453125,0.1085271,0.73563218,0.51595745,0.40231362,0.1466121,0.1085391,0.1890034,0.4409449,0]
	letterDict["C"] = [0.7212276,0.375000,0.3565891,0.00000000,1.00000000,0.26221080,0.2996495,0.3567392,0.3065292,1.0000000,0]
	letterDict["D"] = [0.4168798,1.000000,0.4496124,0.19540230,0.37234043,0.00000000,0.3393692,0.4492529,0.2749141,0.1496063,0]
	letterDict["E"] = [0.4578005,1.000000,0.5581395,0.55172414,0.40957447,0.01285347,0.5181075,0.5578695,0.4261168,0.1614173,0]
	letterDict["F"] = [0.9514066,0.140625,0.6976744,1.00000000,0.18085106,0.37660668,0.8002336,0.6976852,0.7938144,0.9645669,0]
	letterDict["G"] = [0.7698210,0.531250,0.0000000,0.72413793,0.37234043,0.39588689,0.0000000,0.0000000,0.0000000,0.3031496,0]
	letterDict["H"] = [0.5447570,0.453125,0.6279070,0.08045977,0.03723404,0.59897172,0.5893692,0.6200356,0.5429553,0.6574803,0]
	letterDict["I"] = [1.0000000,0.250000,0.4341085,0.70114943,0.45744681,0.39331620,0.5981308,0.4343114,0.6426117,0.9803150,0]
	letterDict["K"] = [0.2634271,1.000000,0.5581395,0.56321839,0.00000000,0.83419023,0.6127336,0.5505922,0.6872852,0.0000000,0]
	letterDict["L"] = [0.9181586,0.250000,0.4341085,0.74712644,0.37234043,0.39331620,0.5928738,0.4343114,0.6426117,0.9409449,0]
	letterDict["M"] = [0.8107417,0.328125,0.5736434,0.65517241,0.16489362,0.35475578,0.6098131,0.5739723,0.6467354,0.9645669,0]
	letterDict["N"] = [0.4475703,0.562500,0.4418605,0.54022989,0.10106383,1.00000000,0.4018692,0.4416660,0.4034364,0.2755906,0]
	letterDict["P"] = [0.6777494,0.531250,0.3178295,0.32183908,0.90425532,0.42673522,0.3674065,0.3101339,0.2879725,0.4645669,0]
	letterDict["Q"] = [0.4296675,0.562500,0.5503876,0.52873563,0.12234043,0.34318766,0.5531542,0.5502826,0.5546392,0.1771654,0]
	letterDict["R"] = [0.0000000,1.000000,0.7751938,0.54022989,0.10106383,1.00000000,0.7920561,0.7674383,0.7216495,0.1338583,0]
	letterDict["S"] = [0.6010230,0.578125,0.2325581,0.57471264,0.13297872,0.34704370,0.1910047,0.2324069,0.2013746,0.2677165,0]
	letterDict["T"] = [0.6342711,0.468750,0.3410853,0.50574713,0.11702128,0.33676093,0.3253505,0.3410235,0.3525773,0.3582677,0]
	letterDict["V"] = [0.9232737,0.296875,0.3255814,0.66666667,0.44680851,0.39074550,0.4398364,0.3257722,0.4914089,0.8937008,0]
	letterDict["W"] = [0.8542199,0.000000,1.0000000,0.77011494,0.26063830,0.37275064,1.0000000,1.0000000,1.0000000,0.8110236,0]
	letterDict["Y"] = [0.7135550,0.171875,0.8217054,0.56321839,0.11170213,0.34061697,0.8014019,0.8215530,0.8061856,0.5944882,0]
	letterDict["X"] = [0,0,0,0,0,0,0,0,0,0,0]
	letterDict["-"] = [0,0,0,0,0,0,0,0,0,0,1]
	AACategoryLen = 11
	
	probMatr = np.zeros((len(sampleSeq3DArr), 1, len(sampleSeq3DArr[0]), AACategoryLen))
	
	
	sampleNo = 0
	for sequence in sampleSeq3DArr:
	
		AANo	 = 0
		for AA in sequence:
			
			if not AA in letterDict:
				probMatr[sampleNo][0][AANo] = np.full((1,AACategoryLen), 0)
			
			else:
				probMatr[sampleNo][0][AANo]= letterDict[AA]
				
			AANo += 1
		sampleNo += 1
	
	return probMatr

def convertSampleToAAindexforUbiVector(sampleSeq3DArr):
    letterDict = {} # Total 13*20
    letterDict["A"] = [0,6,154.33,0.892,27.8,0,-0.31,15,0.3,7.62,50.76,0.984,-1.895,0]
    letterDict["R"] = [10,10.76,341.01,0.901,94.7,1,1.3,	67,	-1.4,6.81,48.66,1.008,-1.475,0]
    letterDict["N"] = [1.3,5.41,207.9,0.93,60.1,0,0.49,	49,	-0.5,	6.17,	45.8,1.048,-1.56,0]
    letterDict["D"] = [1.9,2.77,194.91,0.932,60.6,0,0.58,	50,	-0.6,	6.18,	43.17,	1.068,	-1.518,0]
    letterDict["C"] = [0.17,5.05,219.79,0.925,15.5,0,-0.87,	5,	0.9,	10.93,	58.74,	0.906,	-2.035,0]
    letterDict["Q"] = [1.9,5.65,235.51,0.885,68.7,0,0.7,	56,	-0.7,	6.67,	46.09,	1.037,	-1.521,0]
    letterDict["E"] = [3,3.22,223.16,0.933,68.2,0,0.68,55,	-0.7,	6.38,	43.48,	1.094,	-1.535,0]
    letterDict["G"] = [0,5.97,127.9,0.923,24.5,0,-0.33,10,	0.3,	7.31,	50.27,	1.031,	-1.898,0]
    letterDict["H"] = [0.99,7.59,242.54,0.894,50.7,1,0.13,	34,	-0.1,	7.85,	49.33,	0.95,	-1.755,0]
    letterDict["I"] = [1.2,6.02,233.21,0.872,22.8,0,-0.66,	13,	0.7,	9.99,	57.3,	0.927,	-1.951,0]
    letterDict["L"] = [1,5.98,232.3,0.921,7.6,0,-0.53,16,	0.5,	9.37,	53.89,	0.935,	-1.966,0]
    letterDict["K"] = [5.7,9.74,300.46,1.057,103,1,1.79,85,	-1.8,	5.72,	42.92,	1.102,	-1.374,0]
    letterDict["M"] = [1.9,5.74,202.65,0.804,33.5,0,-0.38,20,	0.4,	9.83,	52.75,	0.952,	-1.963,0]
    letterDict["F"] = [1.1,5.48,204.74,0.914,25.5,0,-0.45,10,	0.5,	8.99,	53.45,	0.915,	-1.864,0]
    letterDict["P"] = [0.18,6.3,179.93,0.932,51.5,0,0.34,45,-0.3,	6.64,	45.39,	1.049,	-1.699,0]
    letterDict["S"] = [0.73,5.68,174.06,0.923,42,0,0.1,32,-0.1,6.93,47.24,1.046,	-1.753,0]
    letterDict["T"] = [1.5,5.66,205.8,0.934,45,0,0.21,32,-0.2,7.08,49.26,0.997,-1.767,0]
    letterDict["W"] = [1.6,5.89,237.01,0.803,34.7,0,-0.27,17,0.3,8.41,53.59,0.904,-1.869,0]
    letterDict["Y"] = [1.8,5.66,229.15,0.837,55.2,0,0.4,41,-0.4,8.53,51.79,0.929,-1.686,0]
    letterDict["V"] = [0.48,5.96,207.6,0.913,23.7,0,-0.62,14,0.6,10.38,56.12,0.931,-1.981,0]
    letterDict["X"] = [0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    letterDict["-"] = [0,0,0,0,0,0,0,0,0,0,0,0,0,1]
    AACategoryLen = 14
    probMatr = np.zeros((len(sampleSeq3DArr), 1, len(sampleSeq3DArr[0]), AACategoryLen))
    
    
    sampleNo = 0
    for sequence in sampleSeq3DArr:
    
    	AANo	 = 0
    	for AA in sequence:
    		
    		if not AA in letterDict:
    			probMatr[sampleNo][0][AANo] = np.full((1,AACategoryLen), 0)
    		
    		else:
    			probMatr[sampleNo][0][AANo]= letterDict[AA]
    			
    		AANo += 1
    	sampleNo += 1
    
    return probMatr

def convertSampleToPhysicsVector_pca(sampleSeq3DArr):
	"""
	Convertd the raw data to physico-chemical property
	
	PARAMETER
	---------
	sampleSeq3DArr: 3D numpy array
		X denoted the unknow amino acid.
	
	
	probMatr: Probability Matrix for Samples. Shape (nb_samples, 1, nb_length_of_sequence, nb_AA)
	"""
	
	letterDict = {} 
	letterDict["A"] = [0.008,0.134,-0.475,-0.039,0.181,0]
	letterDict["R"] = [0.171,-0.361,0.107,-0.258,-0.364,0]
	letterDict["N"] = [0.255,0.038,0.117,0.118,-0.055,0]
	letterDict["D"] = [0.303,-0.057,-0.014,0.225,0.156,0]
	letterDict["C"] = [-0.132,0.174,0.070,0.565,-0.374,0]
	letterDict["Q"] = [0.149,-0.184,-0.030,0.035,-0.112,0]
	letterDict["E"] = [0.221,-0.280,-0.315,0.157,0.303,0]
	letterDict["G"] = [0.218,0.562,-0.024,0.018,0.106,0]
	letterDict["H"] = [0.023,-0.177,0.041,0.280,-0.021,0]
	letterDict["I"] = [-0.353,0.071,-0.088,-0.195,-0.107,0]
	letterDict["L"] = [-0.267,0.018,-0.265,-0.274,0.206,0]
	letterDict["K"] = [0.243,-0.339,-0.044,-0.325,-0.027,0]
	letterDict["M"] = [-0.239,-0.141,-0.155,0.321,0.077,0]
	letterDict["F"] = [-0.329,-0.023,0.072,-0.002,0.208,0]
	letterDict["P"] = [0.173,0.286,0.407,-0.215,0.384,0]
	letterDict["S"] = [0.199,0.238,-0.015,-0.068,-0.196,0]
	letterDict["T"] = [0.068,0.147,-0.015,-0.132,-0.274,0]
	letterDict["W"] = [-0.296,-0.186,0.389,0.083,0.297,0]
	letterDict["Y"] = [-0.141,-0.057,0.425,-0.096,-0.091,0]
	letterDict["V"] = [-0.274,0.136,-0.187,-0.196,-0.299,0]
	letterDict["X"] = [0,0,0,0,0,0]
	letterDict["-"] = [0,0,0,0,0,1]
	AACategoryLen = 6
	
	probMatr = np.zeros((len(sampleSeq3DArr), 1, len(sampleSeq3DArr[0]), AACategoryLen))
	
	
	sampleNo = 0
	for sequence in sampleSeq3DArr:
	
		AANo	 = 0
		for AA in sequence:
			
			if not AA in letterDict:
				probMatr[sampleNo][0][AANo] = np.full((1,AACategoryLen), 0)
			
			else:
				probMatr[sampleNo][0][AANo]= letterDict[AA]
				
			AANo += 1
		sampleNo += 1
	
	return probMatr

def convertSampleToPhysicsVector_2(sampleSeq3DArr):
	"""
	Convertd the raw data to physico-chemical property
	
	PARAMETER
	---------
	sampleSeq3DArr: 3D numpy array
		X denoted the unknow amino acid.
	
	
	probMatr: Probability Matrix for Samples. Shape (nb_samples, 1, nb_length_of_sequence, nb_AA)
	"""
	
	letterDict = {} 
	letterDict["A"] = [-0.591, -1.302, -0.733, 1.570,-0.146]
	letterDict["C"] = [ -1.343, 0.465, -0.862, -1.020, -0.255]
	letterDict["D"] = [1.050, 0.302, -3.656, -0.259, -3.242]
	letterDict["E"] = [1.357, -1.453, 1.477, 0.113, -0.837]
	letterDict["F"] = [-1.006, -0.590, 1.891, -0.397, 0.412]
	letterDict["G"] = [-0.384, 1.652, 1.330, 1.045, 2.064]
	letterDict["H"] = [0.336, -0.417, -1.673, -1.474, -0.078]
	letterDict["I"] = [-1.239, -0.547, 2.131, 0.393, 0.816]
	letterDict["K"] = [1.831, -0.561, 0.533, -0.277, 1.648]
	letterDict["L"] = [-1.019, -0.987, -1.505, 1.266, -0.912]
	letterDict["M"] = [-0.663, -1.524, 2.219, -1.005, 1.212]
	letterDict["N"] = [0.945, 0.828, 1.299, -0.169, 0.933]
	letterDict["P"] = [0.189, 2.081, -1.628, 0.421, -1.392]
	letterDict["Q"] = [0.931, -0.179, -3.005, -0.503, -1.853]
	letterDict["R"] = [1.538, -0.055, 1.502, 0.440, 2.897]
	letterDict["S"] = [-0.228, 1.399, -4.760, 0.670, -2.647]
	letterDict["T"] = [-0.032, 0.326, 2.213, 0.908, 1.313]	
	letterDict["V"] = [-1.337, -0.279, -0.544, 1.242, -1.262]
	letterDict["W"] = [-0.595, 0.009, 0.672, -2.128, -0.184]
	letterDict["Y"] = [0.260, 0.830, 3.097, -0.838, 1.512]
	AACategoryLen = 5
	
	probMatr = np.zeros((len(sampleSeq3DArr), 1, len(sampleSeq3DArr[0]), AACategoryLen))
	
	
	sampleNo = 0
	for sequence in sampleSeq3DArr:
	
		AANo	 = 0
		for AA in sequence:
			
			if not AA in letterDict:
				probMatr[sampleNo][0][AANo] = np.full((1,AACategoryLen), 0)
			
			else:
				probMatr[sampleNo][0][AANo]= letterDict[AA]
				
			AANo += 1
		sampleNo += 1
	
	return probMatr

#def convertSampleToVector2DList(sampleSeq3DArr, nb_windows, refMatrFileName):
#	"""
#	Convertd the raw data to probability matrix
#	PARAMETER
#	---------
#	sampleSeq3DArr: 3D List
#		List -  numpy matrix(3D)
#	Sample List: List (nb_windows, nb_samples, SEQLen/nb_windows , 100)
#	"""
#	rawDataFrame = pd.read_table(refMatrFileName, sep='\t', header=None)
#	raw_data_seq_index_df = pd.DataFrame({'seq' : rawDataFrame[0] , 'indexing':rawDataFrame.index})
#	raw_data_seq_df_index_dict = raw_data_seq_index_df.set_index('seq')['indexing'].to_dict()
#	nb_raw_data_frame_column = len(rawDataFrame.columns)
#	nb_sample = sampleSeq3DArr.shape[0]
#	len_seq = len(sampleSeq3DArr[1]) 
#	
#	
#	probMatr_list = []
#	for tmp_idx in range(nb_windows):
#		probMatr_list.append( np.zeros((nb_sample, int((len_seq - tmp_idx)/nb_windows) , 100)) )
#	for sample_index, sample_sequence in enumerate(sampleSeq3DArr):
#		
#		if sample_index%10000 == 0:
#			print( "%d / %d " % (sample_index, nb_sample))
#		
#		#start_time = time.time()
#		for begin_idx in range(nb_windows):
#			seq_len=int((len_seq - begin_idx)/nb_windows)
#			sub_seq_index = -1
#			for tmp_idx in range(seq_len):
#				sub_seq="".join(sample_sequence[(begin_idx+nb_windows*tmp_idx):(begin_idx+nb_windows*tmp_idx+nb_windows)])
#				if sub_seq in raw_data_seq_df_index_dict:
#					sub_seq_index=raw_data_seq_df_index_dict[sub_seq] 
#				else:
#					sub_seq_index=raw_data_seq_df_index_dict['<unk>']
#				probMatr_list[begin_idx][sample_index][tmp_idx]=rawDataFrame.loc[sub_seq_index][ range(1, nb_raw_data_frame_column)]
#
#	return probMatr_list

def convertSampleToAAindexClusterH(sampleSeq3DArr):
    '''
    Convertd the raw data to physico-chemical property(based on AAindex Cluster H)
    
    PARAMETER
    ---------
    sampleSeq3DArr: 3D numpy array
    	X denoted the unknow amino acid.
    
    probMatr: Probability Matrix for Samples. Shape (nb_samples, 1, nb_length_of_sequence, nb_AA)
    '''
    
    letterDict = {} # Total 149*20
    letterDict["A"] = [0.61,	1.81,	6.8,	0.77,	0.357,	1.18,	1.56,	16,	44,	-0.2,	7.3,	3.9,	-0.45,	-0.08,	0.36,	0.17,	0.02,	25,	0.38,	0.2,	1.56,	1.26,	0.25,	0,	2.34,	0.31,	0,	-0.01,	0,	0,	0,	297,	0,	1,	1.2,	1,	0.67,	0,	1.34,	0.87,	1.041,	0,	0.934,	-0.18,	-0.01,	-0.06,	-0.19,	-0.19,	8,	-0.05,	4.55,	-0.48,	0.1,	0.75,	4.6,	27.5,	0.946,	1.29,	0.83,	8.5,	0.73,	-0.4,	14.53,	-0.06,	0,	87,	10.67,	14.6,	7.62,	12.28,	2.63,	0.23,	12.97,	-0.5,	4.32,	6.61,	8.63,	5.15,	0.5,	2.1,	-2.89,	2.36,	6.05,	0.52,	0.74,	1.94,	-0.67,	-0.5,	1.1,	1,	-0.1,	0.5,	6.5,	-0.67,	0.159,	0.507,	1.4,	1.2,	1,	1.29,	3.7,	0.82,	-0.491,	-0.22,	8.1,	0.93,	9.9,	0.99,	17.05,	1.3,	0.52,	7,	0.94,	1,	0,	6.7,	6,	0.33,	1.6,	1.16,	0.46,	9.9,	0.305,	9.36,	49.1,	2.34,	0.3,	27.8,	51,	15,	1.7,	0.328,	0.15,	0.09,	-12.04,	0.937,	0.03731,	-0.29,	1.29,	1.42,	10.04,	18.08,	18.56,	-0.07,	0.4,	13.65,	-1.895,	1.8,	0]
    letterDict["R"] = [0.6,	-14.92,	0,	0.72,	0.529,	0.2,	0.45,	-70,	-68,	-0.12,	-3.6,	3.2,	-0.24,	-0.09,	-0.52,	-0.7,	-0.42,	90,	0.01,	0,	0.59,	0.38,	-1.76,	-0.96,	1.82,	-1.01,	10,	0.04,	4,	3,	1,	238,	0,	0.7,	1.7,	1.7,	-2.1,	1,	2.78,	0.85,	1.038,	0.65,	0.962,	-0.13,	0.02,	0.02,	0.17,	0.03,	0.1,	0.06,	5.97,	-0.06,	1.91,	0.75,	6.5,	105,	1.028,	0.44,	0.83,	0,	0.73,	-0.59,	17.82,	-0.84,	0,	81,	11.05,	13.24,	6.81,	11.49,	2.45,	-0.26,	11.72,	3,	6.55,	0.41,	6.75,	4.38,	0,	4.2,	-3.3,	1.92,	5.7,	-1.32,	0.64,	-19.92,	3.89,	3,	-0.4,	-2,	-4.5,	0.8,	-0.9,	12.1,	0.194,	0.459,	1.2,	0.7,	0.4,	0.96,	2.53,	0.99,	-0.554,	-0.93,	10.5,	0.98,	4.6,	1.19,	21.25,	0.8,	0.49,	9.1,	1.09,	2.3,	1,	0.3,	10.76,	-0.176,	0.9,	1.72,	-1.54,	0.09,	0.227,	0.27,	133,	1.18,	-1.4,	94.7,	5,	67,	0.1,	2.088,	-0.37,	-3.44,	39.23,	1.725,	0.09593,	-2.71,	-13.6,	-18.6,	6.18,	0,	0,	-0.4,	0.3,	11.28,	-1.475,	-4.5,	52]
    letterDict["N"] = [0.06,	-6.64,	6.2,	0.55,	0.463,	0.23,	0.27,	-74,	-72,	0.08,	-5.7,	-2.8,	-0.2,	-0.7,	-0.9,	-0.9,	-0.77,	63,	0.12,	0.03,	0.51,	0.59,	-0.64,	-0.86,	2.02,	-0.6,	1.3,	0.06,	2,	3,	0,	236,	0,	1.7,	1.2,	1,	-0.6,	1,	0.92,	0.09,	1.117,	1.33,	0.986,	0.28,	0.41,	0.1,	-0.38,	0.02,	0.1,	0,	5.56,	-0.87,	0.48,	0.69,	5.9,	58.7,	1.006,	0.81,	0.09,	8.2,	-0.01,	-0.92,	13.59,	-0.48,	0,	70,	10.85,	11.79,	6.17,	11,	2.27,	-0.94,	11.42,	0.2,	6.24,	1.84,	4.18,	4.81,	0,	7,	-3.41,	1.7,	5.04,	-0.01,	0.63,	-9.68,	2.27,	0.2,	-4.2,	-3,	-1.6,	0.8,	-5.1,	7.23,	0.385,	0.287,	1.2,	0.7,	0.7,	0.9,	2.12,	1.27,	-0.382,	-2.65,	11.6,	0.98,	5.4,	1.15,	34.81,	0.6,	0.42,	10,	1.04,	2.2,	0,	-6.1,	5.41,	-0.233,	0.7,	1.97,	1.31,	0.94,	0.322,	2.31,	-3.6,	2.02,	-0.5,	60.1,	22,	49,	0.4,	1.498,	0.69,	0.84,	4.25,	1.08,	0.00359,	-1.18,	-6.63,	-9.67,	5.63,	17.47,	18.24,	-0.57,	0.9,	12.24,	-1.56,	-3.5,	3.38]
    letterDict["D"] = [0.46,	-8.72,	7,	0.65,	0.511,	0.05,	0.14,	-78,	-91,	-0.2,	-2.9,	-2.8,	-1.52,	-0.71,	-1.09,	-1.05,	-1.04,	50,	0.15,	0.04,	0.23,	0.27,	-0.72,	-0.98,	1.88,	-0.77,	1.9,	0.15,	1,	4,	0,	270,	1,	3.2,	0.7,	0.7,	-1.2,	0,	1.77,	0.66,	1.033,	1.38,	0.994,	0.05,	-0.09,	0.24,	0.09,	-0.06,	70,	0.15,	2.85,	-0.75,	0.78,	0,	5.7,	40,	1.089,	2.02,	0.64,	8.5,	0.54,	-1.31,	19.78,	-0.8,	0,	71,	10.21,	13.78,	6.18,	10.97,	2.29,	-1.13,	10.85,	3,	6.04,	0.59,	6.24,	5.75,	0,	10,	-3.38,	1.67,	4.95,	0,	0.62,	-10.95,	1.57,	2.5,	-1.6,	-0.5,	-2.8,	-8.2,	0.5,	8.72,	0.283,	0.223,	0.6,	0.8,	2.2,	1.04,	2.6,	0.98,	-0.356,	-4.12,	13,	1.01,	2.8,	1.18,	19.27,	0.5,	0.37,	13,	1.08,	6.5,	-1,	-3.1,	2.77,	-0.371,	2.6,	2.66,	-0.33,	0.35,	0.335,	0.94,	0,	2.01,	-0.6,	60.6,	19,	50,	0.4,	3.379,	-0.22,	2.36,	23.22,	1.64,	0.1263,	-1.02,	0,	0,	5.76,	17.36,	17.94,	-0.8,	0.8,	10.98,	-1.518,	-3.5,	49.7]
    letterDict["C"] = [1.07,	1.28,	8.3,	0.65,	0.346,	1.89,	1.23,	168,	90,	-0.45,	-9.2,	-14.3,	0.79,	0.76,	0.7,	1.24,	0.77,	19,	0.45,	0.22,	1.8,	1.6,	0.04,	0.76,	1.92,	1.54,	0.17,	0.12,	0,	0,	0,	178,	0,	1,	1,	1,	0.38,	1,	1.44,	1.52,	0.96,	2.75,	0.9,	-0.26,	-0.27,	-0.19,	0.41,	-0.29,	26,	0.3,	-0.78,	-0.32,	-1.42,	1,	-1,	44.6,	0.878,	0.66,	1.48,	11,	0.7,	0.17,	30.57,	1.36,	0,	104,	14.15,	15.9,	10.93,	14.93,	3.36,	1.78,	14.63,	-1,	1.73,	0.83,	1.03,	3.24,	0,	1.4,	-2.49,	3.36,	7.86,	0,	0.91,	-1.24,	-2,	-1,	7.1,	4.6,	-2.2,	-6.8,	-1.3,	-0.34,	0.187,	0.592,	1.6,	0.8,	0.6,	1.11,	3.03,	0.71,	-0.67,	4.66,	5.5,	0.88,	2.8,	2.32,	28.84,	0.7,	0.83,	5.5,	0.84,	0.1,	0,	-4.9,	5.05,	0.074,	1.2,	0.5,	0.2,	2.55,	0.339,	2.56,	0,	1.65,	0.9,	15.5,	74,	5,	4.6,	0,	-0.19,	4.13,	3.95,	1.004,	0.08292,	0,	0,	0,	8.89,	18.17,	17.84,	0.17,	0.5,	14.49,	-2.035,	2.5,	1.48]
    letterDict["Q"] = [0,	-5.54,	8.5,	0.72,	0.493,	0.72,	0.51,	-73,	-117,	0.16,	-0.3,	1.8,	-0.99,	-0.4,	-1.05,	-1.2,	-1.1,	71,	0.07,	0.01,	0.39,	0.39,	-0.69,	-1,	2.17,	-0.22,	1.9,	0.05,	2,	3,	0,	185,	0,	1,	1,	1,	-0.22,	1,	0.79,	0,	1.165,	0.89,	1.047,	0.21,	0.01,	-0.04,	0.04,	0.02,	33,	-0.08,	4.15,	-0.32,	0.95,	0.59,	6.1,	80.7,	1.025,	1.22,	0,	6.3,	-0.1,	-0.91,	22.18,	-0.73,	0,	66,	11.71,	12.02,	6.67,	11.28,	2.45,	-0.57,	11.76,	0.2,	6.13,	1.2,	4.76,	4.45,	0,	6,	-3.15,	1.75,	5.45,	-0.07,	0.62,	-9.38,	2.12,	0.2,	-2.9,	-2,	-2.5,	-4.8,	1,	6.39,	0.236,	0.383,	1.4,	0.7,	1.5,	1.27,	2.7,	1.01,	-0.405,	-2.76,	10.5,	1.02,	9,	1.52,	15.42,	0.2,	0.35,	8.6,	1.11,	2.1,	0,	0.6,	5.65,	-0.254,	0.8,	3.87,	-1.12,	0.87,	0.306,	1.14,	20,	2.17,	-0.7,	68.7,	16,	56,	0.3,	0,	-0.06,	-1.14,	2.16,	1.078,	0.07606,	-1.53,	-5.47,	-9.31,	5.41,	17.93,	18.51,	-0.26,	0.7,	11.3,	-1.521,	-3.5,	3.53]
    letterDict["E"] = [0.47,	-6.81,	4.9,	0.55,	0.497,	0.11,	0.23,	-106,	-139,	-0.3,	-7.1,	-7.5,	-0.8,	-1.31,	-0.83,	-1.19,	-1.14,	49,	0.18,	0.03,	0.19,	0.23,	-0.62,	-0.89,	2.1,	-0.64,	3,	0.07,	1,	4,	0,	249,	1,	1.7,	0.7,	0.7,	-0.76,	0,	2.54,	0.67,	1.094,	0.92,	0.986,	-0.06,	0.09,	-0.04,	-0.2,	-0.1,	6,	-0.02,	5.16,	-0.71,	0.83,	0,	5.6,	62,	1.036,	2.44,	0.65,	8.8,	0.55,	-1.22,	18.19,	-0.77,	0,	72,	11.71,	13.59,	6.38,	11.19,	2.31,	-0.75,	11.89,	3,	6.17,	1.63,	7.82,	7.05,	0,	7.8,	-2.94,	1.74,	5.1,	-0.79,	0.62,	-10.2,	1.78,	2.5,	0.7,	1.1,	-7.5,	-16.9,	7.8,	7.35,	0.206,	0.445,	0.9,	2.2,	3.3,	1.44,	3.3,	0.54,	-0.371,	-3.64,	12.3,	1.02,	3.2,	1.36,	20.12,	0.7,	0.38,	12.5,	1.12,	6.2,	-1,	2.2,	3.22,	-0.409,	2,	2.4,	0.48,	0.08,	0.282,	0.94,	0,	2.19,	-0.7,	68.2,	16,	55,	0.3,	0,	0.14,	-0.07,	16.81,	0.679,	0.0058,	-0.9,	-6.02,	-9.45,	5.37,	18.16,	17.97,	-0.63,	1.3,	12.55,	-1.535,	-3.5,	49.9]
    letterDict["G"] = [0.07,	0.94,	6.4,	0.65,	0.544,	0.49,	0.62,	-13,	-8,	0,	-1.2,	-2.3,	-1,	-0.84,	-0.82,	-0.57,	-0.8,	23,	0.36,	0.18,	1.03,	1.08,	0.16,	0,	2.35,	0,	0,	0,	0,	0,	0,	290,	0,	1,	0.8,	1.5,	0,	0,	0.95,	0.1,	1.142,	0.74,	1.015,	0.23,	0.13,	0.17,	0.28,	0.19,	0.1,	-0.14,	9.14,	0,	0.33,	0,	7.6,	0,	1.042,	0.76,	0.1,	7.1,	0,	-0.67,	37.16,	-0.41,	0,	90,	10.95,	14.18,	7.31,	12.01,	2.55,	-0.07,	12.43,	0,	6.09,	4.88,	6.8,	6.38,	0,	5.7,	-3.25,	2.06,	6.16,	0,	0.72,	2.39,	0,	0,	-0.2,	0.2,	-0.5,	0,	-8.6,	0,	0.049,	0.39,	0.6,	0.3,	0.6,	0.56,	3.13,	0.94,	-0.534,	-1.62,	9,	1.01,	5.6,	1.4,	38.14,	0.5,	0.41,	7.9,	1.01,	1.1,	0,	-6.8,	5.97,	0.37,	0.9,	1.63,	0.64,	8.14,	0.352,	6.17,	64.6,	2.34,	0.3,	24.5,	52,	10,	1.8,	0.5,	0.36,	0.3,	-7.85,	0.901,	0.00499,	-0.34,	0.94,	2.39,	7.99,	18.24,	18.57,	0.27,	0,	15.36,	-1.898,	-0.4,	0]
    letterDict["H"] = [0.61,	-4.66,	9.2,	0.83,	0.323,	0.31,	0.29,	50,	47,	-0.12,	-2.1,	2,	1.07,	0.43,	0.16,	-0.25,	0.26,	43,	0.17,	0.02,	1,	1,	-0.4,	-0.75,	1.82,	0.13,	0.99,	0.08,	1,	1,	1,	277,	0,	1,	1.2,	1,	0.64,	1,	0,	0.87,	0.982,	0.58,	0.882,	0.24,	0.22,	0.19,	-0.19,	-0.16,	0.1,	-0.07,	4.48,	-0.51,	-0.5,	0,	4.5,	79,	0.952,	0.73,	1.1,	10.1,	1.1,	-0.64,	22.63,	0.49,	0,	90,	12.07,	15.35,	7.85,	12.84,	2.57,	0.11,	12.16,	-0.5,	5.66,	1.14,	2.7,	2.69,	0.5,	2.1,	-2.84,	2.41,	5.8,	0.95,	0.78,	-10.27,	1.09,	-0.5,	-0.7,	-2.2,	0.8,	-3.5,	1.2,	3.82,	0.233,	0.31,	0.9,	0.7,	0.7,	1.22,	3.57,	1.26,	-0.54,	1.28,	10.4,	0.89,	8.2,	1.06,	23.07,	1.9,	0.7,	8.4,	0.92,	2.8,	0,	-1,	7.59,	-0.078,	0.7,	0.86,	-1.31,	0.2,	0.215,	0.47,	75.7,	1.82,	-0.1,	50.7,	34,	34,	0.8,	1.204,	-0.25,	1.11,	6.28,	1.085,	0.02415,	-0.94,	-5.61,	-11.22,	7.49,	18.49,	18.64,	-0.49,	1,	11.59,	-1.755,	-3.2,	51.6]
    letterDict["I"] = [2.22,	4.92,	10,	0.98,	0.462,	1.45,	1.67,	151,	100,	-2.26,	6.6,	11,	0.76,	1.39,	2.17,	2.06,	1.81,	18,	0.6,	0.19,	1.27,	1.44,	0.73,	0.99,	2.36,	1.8,	1.2,	-0.01,	0,	0,	0,	284,	0,	0.6,	0.8,	1,	1.9,	0,	0.52,	3.15,	1.002,	0,	0.766,	-0.42,	-0.27,	-0.2,	-0.06,	-0.08,	55,	0.26,	2.1,	0.81,	-1.13,	2.95,	2.6,	93.5,	0.892,	0.67,	3.07,	16.8,	2.97,	1.25,	20.28,	1.31,	1,	105,	12.95,	14.1,	9.99,	14.77,	3.08,	1.19,	15.67,	-1.8,	2.31,	12.91,	3.48,	4.4,	1.8,	-8,	-1.72,	4.17,	7.51,	2.04,	0.88,	2.15,	-3.02,	-1.8,	8.5,	7,	11.8,	13.9,	0.6,	-3.02,	0.581,	0.111,	0.9,	0.9,	0.4,	0.97,	7.69,	1.67,	-0.762,	5.58,	5.2,	0.79,	17.1,	0.81,	16.66,	1.6,	0.79,	4.9,	0.76,	0.8,	0,	3.2,	6.02,	0.149,	0.7,	0.57,	3.28,	15.25,	0.278,	13.73,	18.9,	2.36,	0.7,	22.8,	66,	13,	3.1,	2.078,	0.02,	-1.03,	-18.32,	0.178,	0,	0.24,	2.88,	0.11,	8.72,	18.62,	19.21,	0.06,	0.4,	14.63,	-1.951,	4.5,	0.13]
    letterDict["L"] = [1.53,	4.92,	12.2,	0.83,	0.365,	3.23,	2.93,	145,	108,	-2.46,	20,	15,	1.29,	1.24,	1.18,	0.96,	1.14,	23,	0.45,	0.16,	1.38,	1.36,	0.53,	0.89,	2.36,	1.7,	1,	-0.01,	0,	0,	0,	337,	0,	1,	1,	1,	1.9,	0,	1.05,	2.17,	0.967,	0,	0.825,	-0.23,	-0.25,	-0.46,	0.34,	-0.42,	33,	0.04,	3.24,	1.02,	-1.18,	2.4,	3.25,	93.5,	0.961,	0.58,	2.52,	15,	2.49,	1.22,	14.3,	1.21,	1,	104,	13.07,	16.49,	9.37,	14.1,	2.98,	1.03,	14.9,	-1.8,	3.93,	21.66,	8.44,	8.11,	1.8,	-9.2,	-1.61,	3.93,	7.37,	1.76,	0.85,	2.28,	-3.02,	-1.8,	11,	9.6,	10,	8.8,	3.2,	-3.02,	0.083,	0.619,	1.1,	0.9,	0.6,	1.3,	5.88,	0.94,	-0.65,	5.01,	4.9,	0.85,	17.6,	1.26,	10.89,	1.4,	0.77,	4.9,	0.82,	0.8,	0,	5.5,	5.98,	0.129,	0.3,	0.51,	0.43,	22.28,	0.262,	16.64,	15.6,	2.36,	0.5,	27.6,	60,	16,	2.4,	0.414,	0.06,	-0.98,	-17.79,	0.808,	0,	-0.12,	3.16,	0.52,	8.79,	18.6,	19.01,	-0.17,	0.6,	14.01,	-1.966,	3.8,	0.13]
    letterDict["K"] = [1.15,	-5.55,	7.5,	0.55,	0.466,	0.06,	0.15,	-141,	-188,	-0.35,	-3.7,	-2.5,	-0.36,	-0.09,	-0.56,	-0.62,	-0.41,	97,	0.03,	0,	0.15,	0.33,	-1.1,	-0.99,	2.16,	-0.99,	5.7,	0,	2,	1,	1,	224,	0,	0.7,	1.7,	1.7,	-0.57,	1,	0.79,	1.64,	1.093,	0.33,	1.04,	0.03,	0.08,	-0.43,	-0.2,	-0.09,	1,	-0.42,	10.68,	-0.09,	1.4,	1.5,	7.9,	100,	1.082,	0.66,	1.6,	7.9,	1.5,	-0.67,	14.07,	-1.18,	0,	65,	9.93,	13.28,	5.72,	10.8,	2.12,	-1.05,	11.36,	3,	7.92,	1.15,	6.25,	5.25,	0,	5.7,	-3.31,	1.23,	4.88,	0.08,	0.52,	-9.52,	2.46,	3,	-1.9,	-3,	-3.2,	0.1,	2.3,	6.13,	0.159,	0.559,	1.9,	0.6,	0.8,	1.23,	1.79,	0.73,	-0.3,	-4.18,	11.3,	1.05,	3.5,	0.91,	16.46,	1,	0.31,	10.1,	1.23,	5.3,	1,	0.5,	9.74,	-0.075,	1,	3.9,	-1.71,	0.16,	0.391,	0.58,	0,	2.18,	-1.8,	103,	3,	85,	0.05,	0.835,	-0.16,	-3.14,	9.71,	1.254,	0.0371,	-2.05,	-5.63,	-9.6,	4.4,	17.96,	18.36,	-0.45,	0.4,	11.96,	-1.374,	-3.9,	49.5]
    letterDict["M"] = [1.18,	2.35,	8.4,	0.98,	0.295,	2.67,	2.96,	124,	121,	-1.47,	5.6,	4.1,	1.37,	1.27,	1.21,	0.6,	1,	31,	0.4,	0.11,	1.93,	1.52,	0.26,	0.94,	2.28,	1.23,	1.9,	0.04,	0,	0,	0,	283,	0,	1,	1,	1,	2.4,	1,	0,	1.67,	0.947,	0,	0.804,	-0.42,	-0.57,	-0.52,	0.45,	-0.38,	54,	0.25,	2.18,	0.81,	-1.59,	1.3,	1.4,	94.1,	0.862,	0.71,	1.4,	13.3,	1.3,	1.02,	20.61,	1.27,	0,	100,	15,	16.23,	9.83,	14.33,	3.18,	0.66,	14.39,	-1.3,	2.44,	7.17,	2.14,	1.6,	1.3,	-4.2,	-1.84,	4.22,	6.39,	1.32,	0.85,	-1.48,	-1.67,	-1.3,	5.4,	4,	7.1,	4.8,	5.3,	-1.3,	0.198,	0.431,	1.7,	0.3,	1,	1.47,	5.21,	1.3,	-0.659,	3.51,	5.7,	0.84,	14.9,	1,	20.61,	2.8,	0.76,	5.3,	0.83,	0.7,	0,	7.2,	5.74,	-0.092,	1,	0.4,	0.15,	1.85,	0.28,	3.93,	6.8,	2.28,	0.4,	33.5,	52,	20,	1.9,	0.982,	0.11,	-0.41,	-8.86,	0.886,	0.08226,	-0.24,	1.03,	-2.8,	9.15,	18.11,	18.49,	0.03,	0.3,	13.4,	-1.963,	1.9,	1.43]
    letterDict["F"] = [2.02,	2.98,	8.3,	0.98,	0.314,	1.96,	2.03,	189,	148,	-2.33,	19.2,	14.7,	1.48,	1.53,	1.01,	1.29,	1.35,	24,	0.5,	0.14,	1.42,	1.46,	0.61,	0.92,	2.16,	1.79,	1.1,	0.03,	0,	0,	0,	284,	0,	1,	1,	1,	2.3,	1,	0.43,	2.87,	0.93,	0,	0.773,	-0.18,	-0.12,	-0.33,	0.07,	-0.32,	18,	0.09,	4.37,	1.03,	-2.12,	2.65,	3.2,	115.5,	0.912,	0.61,	2.75,	11.2,	2.65,	1.92,	19.61,	1.27,	1,	108,	13.27,	14.18,	8.99,	13.43,	3.02,	0.48,	14,	-2.5,	2.59,	7.76,	2.73,	3.52,	2.5,	-9.2,	-1.63,	4.37,	6.62,	2.09,	0.88,	-0.76,	-3.24,	-2.5,	13.4,	12.6,	13.9,	13.2,	1.6,	-3.24,	0.682,	0.077,	1,	0.5,	0.6,	1.07,	6.6,	1.56,	-0.729,	5.27,	5.2,	0.78,	18.8,	1.25,	16.26,	2.9,	0.87,	5,	0.73,	1.4,	0,	2.8,	5.48,	-0.011,	0.9,	0.43,	0.52,	6.47,	0.195,	10.99,	54.7,	1.83,	0.5,	25.5,	58,	10,	2.2,	1.336,	1.18,	0.45,	-21.98,	0.803,	0.0946,	0,	0.89,	-2.85,	7.98,	17.3,	17.95,	0.4,	0.7,	14.08,	-1.864,	2.8,	0.35]
    letterDict["P"] = [1.95,	0,	6.9,	0.55,	0.509,	0.76,	0.76,	-20,	-36,	-0.98,	5.1,	5.6,	-0.12,	-0.01,	-0.06,	-0.21,	-0.09,	50,	0.18,	0.04,	0.27,	0.54,	-0.07,	0.22,	1.95,	0.72,	0.18,	0,	0,	0,	0,	222,	0,	1,	1,	0.1,	1.2,	0,	0.37,	2.77,	1.055,	0.39,	1.047,	-0.13,	0.26,	0.37,	0.04,	0.05,	42,	0.31,	5.14,	2.03,	0.73,	2.6,	7,	41.9,	1.085,	2.01,	2.7,	8.2,	2.6,	-0.49,	52.63,	0,	0,	78,	10.62,	14.1,	6.64,	11.19,	2.46,	-0.76,	11.37,	0,	7.19,	3.51,	6.28,	5.65,	0,	2.1,	-2.5,	1.89,	5.65,	0,	0.64,	-3.68,	-1.75,	-1.4,	4.4,	3.1,	8,	6.1,	-7.7,	-1.75,	0.366,	0.739,	0.3,	2.6,	0.4,	0.52,	2.12,	0.69,	-0.463,	-3.03,	8,	1,	14.8,	0,	23.94,	0,	0.35,	6.6,	1.04,	0.9,	0,	-22.8,	6.3,	0.37,	0.5,	2.04,	-0.58,	2.38,	0.346,	1.96,	43.8,	1.99,	-0.3,	51.5,	25,	45,	0.6,	0.415,	0.11,	2.23,	5.82,	0.748,	0.01979,	0,	0,	0,	7.79,	18.16,	18.77,	-0.47,	0.9,	11.51,	-1.699,	-1.6,	1.58]
    letterDict["S"] = [0.05,	-3.4,	8,	0.55,	0.507,	0.97,	0.81,	-70,	-60,	-0.39,	-4.1,	-3.5,	-0.98,	-0.93,	-0.6,	-0.83,	-0.97,	44,	0.22,	0.08,	0.96,	0.98,	-0.26,	-0.67,	2.19,	-0.04,	0.73,	0.11,	1,	2,	0,	228,	0,	1.7,	1.5,	1,	0.01,	0,	0.87,	0.07,	1.169,	1.42,	1.056,	0.41,	0.44,	0.43,	-0.23,	0.25,	0.1,	-0.11,	6.78,	0.05,	0.52,	0,	5.25,	29.3,	1.048,	0.74,	0.14,	7.4,	0.04,	-0.55,	18.56,	-0.5,	0,	83,	11.18,	13.36,	6.93,	11.26,	2.6,	-0.67,	11.23,	0.3,	5.37,	6.84,	8.53,	8.04,	0,	6.5,	-3.3,	1.81,	5.53,	0.04,	0.66,	-5.06,	0.1,	0.3,	-3.2,	-2.9,	-3.7,	1.2,	-3.9,	4.35,	0.15,	0.689,	1.1,	0.7,	0.4,	0.82,	2.43,	0.65,	-0.455,	-2.84,	9.2,	1.02,	6.9,	1.5,	19.95,	0.5,	0.49,	7.5,	1.04,	1.7,	0,	-3,	5.68,	0.022,	0.8,	1.61,	-0.83,	4.17,	0.326,	5.58,	44.4,	2.21,	-0.1,	42,	35,	32,	0.8,	1.089,	0.13,	0.57,	-1.54,	1.145,	0.08292,	-0.75,	-3.44,	-5.1,	7.08,	17.57,	18.06,	-0.11,	0.4,	11.26,	-1.753,	-0.8,	1.67]
    letterDict["T"] = [0.05,	-2.57,	7,	0.83,	0.444,	0.84,	0.91,	-38,	-54,	-0.52,	0.8,	1.1,	-0.7,	-0.59,	-1.2,	-0.62,	-0.77,	47,	0.23,	0.08,	1.11,	1.01,	-0.18,	0.09,	2.09,	0.26,	1.5,	0.04,	1,	2,	0,	253,	0,	1.7,	1,	1,	0.52,	0,	1.14,	0.07,	1.073,	0.71,	1.008,	0.33,	0.35,	0.5,	-0.02,	0.22,	0.1,	-0.06,	8.6,	-0.35,	0.07,	0.45,	4.8,	51.3,	1.051,	1.08,	0.54,	8.8,	0.44,	-0.28,	21.09,	-0.27,	0,	83,	10.53,	14.5,	7.08,	11.65,	2.55,	-0.36,	11.69,	-0.4,	5.16,	8.89,	4.43,	7.41,	0.4,	5.2,	-2.91,	2.04,	5.81,	0.27,	0.7,	-4.88,	-0.42,	-0.4,	-1.7,	-0.6,	1.5,	2.7,	-2.6,	3.86,	0.074,	0.785,	0.6,	0.8,	1,	0.82,	2.6,	0.98,	-0.515,	-1.2,	8.6,	0.99,	9.5,	1.18,	18.92,	0.6,	0.38,	6.6,	1.02,	1.5,	0,	-4,	5.66,	0.136,	0.7,	1.48,	-1.52,	4.33,	0.251,	4.68,	31,	2.1,	-0.2,	45,	30,	32,	0.7,	1.732,	0.28,	-1.4,	-4.15,	1.487,	0.09408,	-0.71,	-2.84,	-5.15,	7,	17.54,	17.71,	0.09,	0.4,	13,	-1.767,	-0.7,	1.66]
    letterDict["W"] = [2.65,	2.33,	5.7,	0.77,	0.305,	0.77,	1.08,	145,	163,	-2.01,	16.3,	17.8,	1.38,	2.25,	1.31,	1.51,	1.71,	32,	0.27,	0.04,	0.91,	1.06,	0.37,	0.67,	2.43,	2.25,	1.6,	0,	1,	0,	0,	282,	0,	1,	1,	1,	2.6,	1,	1.79,	3.77,	0.925,	0.13,	0.848,	-0.1,	-0.15,	-0.32,	0.16,	-0.19,	77,	0.19,	1.97,	0.66,	-0.51,	3,	4,	145.5,	0.917,	1.47,	0.31,	9.9,	3,	0.5,	19.78,	0.88,	1,	94,	11.41,	13.9,	8.41,	12.95,	2.85,	0.9,	13.93,	-3.4,	2.78,	2.11,	0.8,	1.68,	3.4,	-10,	-1.75,	3.82,	6.98,	2.51,	0.85,	-5.88,	-2.86,	-3.4,	17.1,	15.1,	18.1,	14.9,	1.2,	-2.86,	0.463,	0.16,	1.4,	2.1,	1.4,	0.99,	6.25,	1.25,	-0.839,	5.2,	5.4,	0.83,	17.1,	1.33,	23.36,	2.1,	0.86,	5.3,	0.87,	1.9,	0,	4,	5.89,	-0.011,	1.7,	0.75,	1.25,	2.21,	0.291,	2.2,	70.5,	2.38,	0.3,	34.7,	49,	17,	1.6,	1.781,	-0.12,	0.85,	-16.19,	0.803,	0.05481,	-0.59,	-0.18,	-8.39,	8.07,	17.19,	16.87,	-0.61,	0.6,	12.06,	-1.869,	-0.9,	2.1]
    letterDict["Y"] = [1.88,	-0.14,	6.8,	0.83,	0.42,	0.39,	0.68,	53,	22,	-2.24,	5.9,	3.8,	1.49,	1.53,	1.05,	0.66,	1.11,	60,	0.15,	0.03,	1.1,	0.89,	0.02,	-0.93,	2.2,	0.96,	1.8,	0.03,	1,	2,	0,	344,	0,	1,	1,	1,	1.6,	1,	0.73,	2.67,	0.961,	0.2,	0.931,	-0.1,	0.15,	0.35,	0.22,	0.05,	66,	0.33,	2.4,	1.24,	-0.21,	2.85,	4.35,	117.3,	0.93,	0.68,	2.97,	8.8,	2.97,	1.67,	26.36,	0.33,	1,	83,	11.52,	14.76,	8.53,	13.29,	2.79,	0.59,	13.42,	-2.3,	3.58,	2.57,	2.54,	3.42,	2.3,	-1.9,	-2.42,	2.91,	6.73,	1.63,	0.76,	-6.11,	0.98,	-2.3,	7.4,	6.7,	8.2,	6.1,	-4.5,	0.98,	0.737,	0.06,	0.2,	1.8,	1.2,	0.72,	3.03,	1.26,	-0.656,	2.15,	6.2,	0.93,	15,	1.09,	26.49,	0.8,	0.64,	5.7,	1.03,	2.1,	0,	-4.6,	5.66,	-0.138,	0.4,	1.72,	-2.21,	3.42,	0.293,	3.13,	0,	2.2,	-0.4,	55.2,	24,	41,	0.5,	0,	0.19,	0.01,	-1.51,	1.227,	0.05159,	-1.02,	-1.77,	-7.74,	6.9,	17.99,	18.23,	-0.61,	1.2,	12.64,	-1.686,	-1.3,	1.61]
    letterDict["V"] = [1.32,	4.04,	9.4,	0.98,	0.386,	1.08,	1.14,	123,	117,	-1.56,	3.5,	2.1,	1.26,	1.09,	1.21,	1.21,	1.13,	18,	0.54,	0.18,	1.58,	1.33,	0.54,	0.84,	2.32,	1.22,	0.48,	0.01,	0,	0,	0,	293,	0,	0.6,	0.8,	1,	1.5,	0,	0,	1.87,	0.982,	0,	0.825,	-0.07,	-0.09,	0,	0.05,	-0.15,	0.1,	0.04,	3.81,	0.56,	-1.27,	1.7,	3.4,	71.5,	0.927,	0.61,	1.79,	12,	1.69,	0.91,	21.87,	1.09,	1,	94,	13.86,	16.3,	10.38,	15.07,	3.21,	1.24,	15.71,	-1.5,	3.31,	6.3,	5.44,	7,	1.5,	-3.7,	-2.08,	3.49,	7.62,	1.18,	0.86,	1.99,	-2.18,	-1.5,	5.9,	4.6,	3.3,	2.7,	1.4,	-2.18,	0.301,	0.356,	0.8,	1.1,	1.1,	0.91,	7.14,	1.22,	-0.728,	4.45,	5.9,	0.81,	14.3,	1.01,	17.06,	1.4,	0.72,	5.6,	0.81,	0.9,	0,	2.5,	5.96,	0.245,	0.6,	0.59,	0.54,	14.34,	0.291,	12.43,	29.5,	2.32,	0.6,	23.7,	64,	14,	2.9,	0.946,	-0.08,	-1.29,	-16.22,	0.625,	0.00569,	0.09,	2.86,	0.81,	8.88,	18.3,	18.98,	-0.11,	0.4,	12.88,	-1.981,	4.2,	0.13]
    AACategoryLen = 149
    encodeX = np.zeros(AACategoryLen)
    for k in letterDict.keys():
        encodeX+=np.asarray(letterDict[k])
    
    encodeX = encodeX/20.0
    letterDict["X"] = list(encodeX)
    letterDict["-"] = list(np.zeros(AACategoryLen))
    probMatr = np.zeros((len(sampleSeq3DArr), 1, len(sampleSeq3DArr[0]), AACategoryLen))
    
    sampleNo = 0
    for sequence in sampleSeq3DArr:
        
        AANo	 = 0
        for AA in sequence:
            
            if not AA in letterDict:
                #probMatr[sampleNo][0][AANo] = np.full((1,AACategoryLen), 0)
                continue
            
            else:
                probMatr[sampleNo][0][AANo]= letterDict[AA]
            
            AANo += 1
        
        sampleNo += 1
    
    return probMatr

def convertSampleToAAindexClusterP(sampleSeq3DArr):
    '''
    Convertd the raw data to physico-chemical property(based on AAindex Cluster P)
    
    PARAMETER
    ---------
    sampleSeq3DArr: 3D numpy array
    	X denoted the unknow amino acid.
    
    probMatr: Probability Matrix for Samples. Shape (nb_samples, 1, nb_length_of_sequence, nb_AA)
    '''
    letterDict = {} # Total 46*20
    letterDict["A"] = [0.89,	0.28,	1.34,	-9.475,	0.025,	-7.02,	-0.11,	-0.152,	100,	100,	5.2,	4.34,	86.6,	11.5,	0.691,	52.6,	0,	1.52,	2.04,	1.28,	1,	89.09,	0.71,	91.5,	115,	0.75,	2.5,	-0.44,	-0.31,	-0.02,	88.3,	31,	0.28,	30.88,	154.33,	0.77,	0.77,	0,	0,	4.349,	4.35,	2.87,	-1.404,	0.13,	93.7,	0.07]
    letterDict["R"] = [0.88,	0.1,	0.95,	-16.225,	0.2,	-10.131,	0.079,	-0.089,	65,	83,	6,	26.66,	162.2,	14.28,	0.728,	109.1,	0,	1.52,	6.24,	2.34,	6.13,	174.2,	1.06,	202,	225,	0.7,	7.5,	-0.13,	-0.1,	0.04,	181.2,	124,	0.34,	68.43,	341.01,	3.72,	2.38,	1,	1,	4.396,	4.38,	7.82,	-0.921,	-5,	250.4,	2.88]
    letterDict["N"] = [0.89,	0.25,	2.49,	-12.48,	0.1,	-9.424,	-0.136,	-0.203,	134,	104,	5,	13.28,	103.3,	12.82,	0.596,	75.7,	1,	1.52,	4.37,	1.6,	2.95,	132.12,	1.37,	135.2,	160,	0.61,	5,	0.05,	0.06,	0.03,	125.1,	56,	0.31,	41.7,	207.9,	1.98,	1.45,	1,	1,	4.755,	4.75,	4.58,	-1.178,	-3.04,	146.3,	3.22]
    letterDict["D"] = [0.87,	0.21,	3.32,	-12.144,	0.1,	-9.296,	-0.285,	-0.355,	106,	86,	5,	12,	97.8,	11.68,	0.558,	68.4,	1,	1.52,	3.78,	1.6,	2.78,	133.1,	1.21,	124.5,	150,	0.6,	2.5,	-0.2,	0.13,	0.11,	110.8,	54,	0.33,	40.66,	194.91,	1.99,	1.43,	1,	1,	4.765,	4.76,	4.74,	-1.162,	-2.23,	142.6,	3.64]
    letterDict["C"] = [0.85,	0.28,	1.07,	-12.21,	0.1,	-8.19,	-0.184,	0,	20,	44,	6.1,	35.77,	132.3,	13.46,	0.624,	68.3,	0,	1.52,	3.41,	1.77,	2.43,	121.15,	1.19,	117.7,	135,	0.61,	3,	0.13,	-0.11,	-0.02,	112.4,	55,	0.11,	53.83,	219.79,	1.38,	1.22,	1,	0,	4.686,	4.65,	4.47,	-1.365,	-2.52,	135.2,	0.71]
    letterDict["Q"] = [0.82,	0.35,	1.49,	-13.689,	0.1,	-10.044,	-0.067,	-0.181,	93,	84,	6,	17.56,	119.2,	14.45,	0.649,	89.7,	0,	1.52,	3.53,	1.56,	3.95,	146.15,	0.87,	161.1,	180,	0.67,	6,	-0.58,	-0.47,	-0.17,	148.7,	85,	0.39,	46.62,	235.51,	2.58,	1.75,	1,	1,	4.373,	4.37,	6.11,	-1.116,	-3.84,	177.7,	2.18]
    letterDict["E"] = [0.84,	0.33,	2.2,	-13.815,	0.1,	-10.467,	-0.246,	-0.411,	102,	77,	6,	17.26,	113.9,	13.57,	0.632,	84.7,	1,	1.52,	3.31,	1.56,	3.78,	147.13,	0.84,	155.1,	190,	0.66,	5,	-0.28,	-0.05,	0.1,	140.5,	83,	0.37,	44.98,	223.16,	2.63,	1.77,	1,	1,	4.295,	4.29,	5.97,	-1.163,	-3.43,	182.9,	3.08]
    letterDict["G"] = [0.92,	0.17,	2.07,	-7.592,	0.025,	-5.456,	-0.073,	-0.19,	49,	50,	4.2,	0,	62.9,	3.4,	0.592,	36.3,	1,	1,	1,	0,	0,	75.07,	1.52,	66.4,	75,	0.64,	0.5,	0.08,	0.45,	0.38,	60,	3,	0.28,	24.74,	127.9,	0,	0.58,	0,	0,	3.972,	3.97,	2.06,	-1.364,	1.45,	52.6,	2.23]
    letterDict["H"] = [0.83,	0.21,	1.27,	-17.55,	0.1,	-12.15,	0.32,	0,	66,	91,	6,	21.81,	155.8,	13.69,	0.646,	91.9,	0,	1.52,	5.66,	2.99,	4.66,	155.16,	1.07,	167.3,	195,	0.67,	6,	0.09,	-0.06,	-0.09,	152.6,	96,	0.23,	65.99,	242.54,	2.76,	1.78,	1,	1,	4.63,	4.63,	5.23,	-1.215,	-5.61,	188.1,	2.41]
    letterDict["I"] = [0.76,	0.82,	0.66,	-15.608,	0.19,	-9.512,	0.001,	-0.086,	96,	103,	7,	19.06,	158,	21.4,	0.809,	102,	0,	1.9,	3.49,	4.19,	4,	131.17,	0.66,	168.8,	175,	0.9,	5.5,	-0.04,	-0.25,	-0.48,	168.5,	111,	0.12,	49.71,	233.21,	1.83,	1.56,	2,	1,	4.224,	3.95,	4.92,	-1.189,	-2.77,	182.2,	-4.44]
    letterDict["L"] = [0.73,	1,	0.54,	-15.728,	0.19,	-10.52,	-0.008,	-0.102,	40,	54,	7,	18.78,	164.1,	21.4,	0.842,	102,	0,	1.52,	4.45,	2.59,	4,	131.17,	0.69,	167.9,	170,	0.9,	5.5,	-0.12,	-0.44,	-0.26,	168.5,	111,	0.16,	50.62,	232.3,	2.08,	1.54,	1,	2,	4.385,	4.17,	4.92,	-1.315,	-2.64,	173.7,	-4.19]
    letterDict["K"] = [0.97,	0.09,	0.61,	-12.366,	0.2,	-9.666,	0.049,	-0.062,	56,	72,	6,	21.29,	115.5,	15.71,	0.767,	105.1,	0,	1.52,	4.87,	1.89,	4.77,	146.19,	0.99,	171.3,	200,	0.82,	7,	-0.33,	-0.44,	-0.39,	175.6,	119,	0.59,	63.21,	300.46,	2.94,	2.08,	1,	1,	4.358,	4.36,	6.89,	-1.074,	-3.97,	215.2,	2.84]
    letterDict["M"] = [0.74,	0.74,	0.7,	-15.704,	0.19,	-10.424,	-0.041,	-0.107,	94,	93,	6.8,	21.64,	172.9,	16.25,	0.709,	97.7,	0,	1.52,	4.8,	2.35,	4.43,	149.21,	0.59,	170.8,	185,	0.75,	6,	-0.21,	-0.28,	-0.14,	162.2,	105,	0.08,	55.32,	202.65,	2.34,	1.8,	1,	1,	4.513,	4.52,	6.36,	-1.303,	-3.83,	197.6,	-2.49]
    letterDict["F"] = [0.52,	2.18,	0.8,	-20.504,	0.39,	-12.485,	0.438,	0.001,	41,	51,	7.1,	29.4,	194.1,	19.8,	0.756,	113.9,	0,	1.52,	6.02,	2.94,	5.89,	165.19,	0.71,	203.4,	210,	0.77,	6.5,	-0.13,	-0.04,	-0.03,	189,	132,	0.1,	51.06,	204.74,	2.97,	1.9,	1,	1,	4.663,	4.66,	4.62,	-1.135,	-3.74,	228.6,	-4.92]
    letterDict["P"] = [0.82,	0.39,	2.12,	-11.893,	0.17,	-8.652,	-0.016,	-0.181,	56,	58,	6.2,	10.93,	92.9,	17.43,	0.73,	73.6,	0,	1.52,	4.31,	2.67,	2.72,	115.13,	1.61,	129.3,	145,	0.76,	5.5,	-0.48,	-0.29,	-0.04,	122.2,	32.5,	0.46,	39.21,	179.93,	1.42,	1.25,	0,	0,	4.471,	4.44,	4.11,	-1.236,	0,	0,	-1.22]
    letterDict["S"] = [0.96,	0.12,	0.94,	-10.518,	0.025,	-7.782,	-0.153,	-0.203,	120,	117,	4.9,	6.35,	85.6,	9.47,	0.594,	54.9,	0,	1.52,	2.7,	1.31,	1.6,	105.09,	1.34,	99.1,	115,	0.68,	3,	0.27,	0.34,	0.41,	88.7,	32,	0.27,	35.65,	174.06,	1.28,	1.08,	1,	0,	4.498,	4.5,	3.97,	-1.297,	-1.66,	109.5,	1.96]
    letterDict["T"] = [0.92,	0.21,	1.09,	-12.369,	0.1,	-8.764,	-0.208,	-0.17,	97,	107,	5,	11.01,	106.5,	15.77,	0.655,	71.2,	0,	1.73,	3.17,	3.03,	2.6,	119.12,	1.08,	122.1,	140,	0.7,	5,	0.47,	0.27,	0.36,	118.2,	61,	0.26,	36.5,	205.8,	1.43,	1.24,	2,	0,	4.346,	4.35,	4.11,	-1.252,	-2.31,	142.1,	0.92]
    letterDict["W"] = [0.2,	5.7,	-4.65,	-26.166,	0.56,	-14.42,	0.493,	0.275,	18,	25,	7.6,	42.53,	224.6,	21.67,	0.743,	135.4,	0,	1.52,	5.9,	3.21,	8.08,	204.24,	0.76,	237.6,	255,	0.74,	7,	-0.22,	-0.08,	-0.01,	227,	170,	0.15,	60,	237.01,	3.58,	2.21,	1,	1,	4.702,	4.7,	7.68,	-1.03,	-8.21,	271.6,	-4.75]
    letterDict["Y"] = [0.49,	1.26,	-0.17,	-20.232,	0.39,	-12.36,	0.381,	0,	41,	50,	7.1,	31.53,	177.7,	18.03,	0.743,	116.2,	0,	1.52,	6.72,	2.94,	6.47,	181.19,	1.07,	203.6,	230,	0.71,	7,	-0.11,	0.06,	-0.08,	193,	136,	0.25,	51.15,	229.15,	3.36,	2.13,	1,	1,	4.604,	4.6,	4.73,	-1.03,	-5.97,	239.9,	-1.39]
    letterDict["V"] = [0.85,	0.6,	1.32,	-13.867,	0.15,	-8.778,	-0.155,	-0.125,	74,	98,	6.4,	13.92,	141,	21.57,	0.777,	85.1,	0,	1.9,	3.17,	3.67,	3,	117.15,	0.63,	141.7,	155,	0.86,	5,	0.06,	0.11,	-0.18,	141.4,	84,	0.22,	42.75,	207.6,	1.49,	1.29,	2,	0,	4.184,	3.95,	4.11,	-1.254,	-2.05,	157.2,	-2.69]
    AACategoryLen = 46
    encodeX = np.zeros(AACategoryLen)
    for k in letterDict.keys():
        encodeX+=np.asarray(letterDict[k])
    
    encodeX = encodeX/20.0
    letterDict["X"] = list(encodeX)
    letterDict["-"] = list(np.zeros(AACategoryLen))
    probMatr = np.zeros((len(sampleSeq3DArr), 1, len(sampleSeq3DArr[0]), AACategoryLen))
    
    sampleNo = 0
    for sequence in sampleSeq3DArr:
        
        AANo = 0
        for AA in sequence:
            
            if not AA in letterDict:
                #probMatr[sampleNo][0][AANo] = np.full((1,AACategoryLen), 0)
                continue
            
            else:
                probMatr[sampleNo][0][AANo] = letterDict[AA]
            
            AANo += 1
        
        sampleNo += 1
    
    return probMatr

def convertSampleToAAindexClusterO(sampleSeq3DArr):
    '''
    Convertd the raw data to physico-chemical property(based on AAindex Cluster O)
    
    PARAMETER
    ---------
    sampleSeq3DArr: 3D numpy array
    	X denoted the unknow amino acid.
    
    probMatr: Probability Matrix for Samples. Shape (nb_samples, 1, nb_length_of_sequence, nb_AA)
    '''
    
    letterDict = {} # Total 28*20
    letterDict["A"] = [0.78,	0.497,	0.941,	0.035,	0.35,	0.7,	0.5,	0.16,	0.7,	0.7,	0.3,	0.82,	0.64,	0.47,	0.17,	1.13,	0.289,	0.945,	1.02,	0.8,	7.3,	121.9,	243.2,	0.9,	0.78,	-0.118,	0.52,	0.53]
    letterDict["R"] = [1.75,	0.677,	1.112,	0.099,	0.75,	0.34,	0.4,	-0.2,	0.4,	0.4,	0.9,	2.6,	0.62,	0.52,	0.76,	0.48,	1.38,	0.364,	1,	0.9,	11.1,	121.4,	206.6,	0.99,	0.88,	0.124,	0.68,	0.69]
    letterDict["N"] = [1.32,	2.072,	1.038,	0.191,	2.12,	1.42,	3.5,	1.03,	1.2,	1.2,	2.73,	2.07,	3.14,	2.16,	2.62,	1.11,	3.169,	1.202,	1.31,	1.6,	8,	117.5,	207.1,	0.76,	1.28,	0.289,	0.76,	0.58]
    letterDict["D"] = [1.25,	1.498,	1.071,	0.179,	2.16,	0.98,	2.1,	-0.24,	1.4,	1.4,	1.26,	2.64,	1.92,	1.15,	1.08,	1.18,	0.917,	1.315,	1.76,	0.7,	9.2,	121.2,	215,	0.72,	1.41,	0.048,	0.76,	0.59]
    letterDict["C"] = [3.14,	1.348,	0.866,	0.117,	0.5,	0.65,	0.6,	-0.12,	0.6,	0.6,	0.72,	0,	0.32,	0.41,	0.95,	0.38,	1.767,	0.932,	1.05,	0.4,	14.4,	113.7,	209.4,	0.74,	0.8,	0.083,	0.62,	0.66]
    letterDict["Q"] = [0.93,	0.711,	1.15,	0.037,	0.73,	0.75,	0.4,	-0.55,	1,	1,	0.97,	0,	0.8,	0.95,	0.91,	0.41,	2.372,	0.704,	1.05,	0.9,	10.6,	118,	205.4,	0.8,	0.97,	-0.105,	0.68,	0.71]
    letterDict["E"] = [0.94,	0.651,	1.1,	0.077,	0.65,	1.04,	0.4,	-0.45,	1,	1,	1.33,	2.62,	1.01,	0.64,	0.28,	1.02,	0.285,	1.014,	0.83,	0.3,	11.4,	118.2,	213.6,	0.75,	1,	-0.245,	0.68,	0.72]
    letterDict["G"] = [1.13,	1.848,	1.055,	0.19,	2.4,	1.41,	1.8,	-0.16,	1.6,	1.6,	3.09,	1.63,	0.63,	3.03,	5.02,	3.84,	4.259,	2.355,	2.39,	3.9,	0,	0,	300,	0.92,	1.64,	0.104,	0,	0]
    letterDict["H"] = [1.03,	1.474,	0.911,	0.093,	1.19,	1.22,	1.1,	-0.18,	1.2,	1.2,	1.33,	0,	2.05,	0.89,	0.57,	0.3,	1.061,	0.525,	0.4,	1.3,	10.2,	118.2,	219.9,	1.08,	0.69,	0.138,	0.7,	0.64]
    letterDict["I"] = [1.26,	0.471,	0.742,	0.013,	0.12,	0.78,	0.2,	-0.19,	0.9,	0.9,	0.45,	2.32,	0.92,	0.62,	0.26,	0.4,	0.262,	0.673,	0.83,	0.7,	16.1,	118.9,	217.9,	1.45,	0.51,	0.23,	1.02,	0.96]
    letterDict["L"] = [0.91,	0.656,	0.798,	0.036,	0.58,	0.85,	0.2,	-0.44,	0.9,	0.9,	0.96,	0,	0.37,	0.53,	0.21,	0.65,	0,	0.758,	1.06,	0.7,	10.1,	118.1,	205.6,	1.02,	0.59,	-0.052,	0.98,	0.92]
    letterDict["K"] = [0.85,	0.932,	1.232,	0.072,	0.83,	1.01,	0.7,	-0.12,	1,	1,	0.71,	2.86,	0.89,	0.98,	1.17,	1.13,	1.288,	0.947,	0.94,	1.3,	10.9,	122,	210.9,	0.77,	0.96,	0.032,	0.68,	0.78]
    letterDict["M"] = [0.41,	0.425,	0.781,	0.014,	0.22,	0.83,	0.8,	-0.79,	0.3,	0.3,	1.89,	0,	1.07,	0.68,	0,	0,	0,	1.028,	1.33,	0.8,	10.4,	113.1,	204,	0.97,	0.39,	-0.258,	0.78,	0.77]
    letterDict["F"] = [1.07,	1.348,	0.723,	0.065,	0.89,	0.93,	0.2,	-0.25,	1.2,	1.2,	1.2,	0,	0.86,	0.61,	0.28,	0.45,	0.393,	0.622,	0.41,	0.5,	13.9,	118.2,	203.7,	1.32,	0.58,	0.015,	0.7,	0.71]
    letterDict["P"] = [1.73,	0.179,	1.093,	0.034,	0.43,	1.1,	0.8,	-0.59,	0.7,	0.7,	0.83,	0,	0.5,	0.63,	0.12,	0,	0,	0.579,	2.73,	0.7,	17.8,	81.9,	237.4,	0.64,	1.91,	0,	0.36,	0]
    letterDict["S"] = [1.31,	1.151,	1.082,	0.125,	1.24,	1.55,	2.3,	-0.01,	1.6,	1.6,	1.16,	1.23,	1.01,	1.03,	0.57,	0.81,	0.16,	1.14,	1.18,	0.8,	13.1,	117.9,	232,	0.95,	1.33,	0.225,	0.53,	0.55]
    letterDict["T"] = [1.57,	0.749,	1.043,	0.065,	0.85,	1.09,	1.6,	0.05,	0.3,	0.3,	0.97,	2.48,	0.92,	0.39,	0.23,	0.71,	0.218,	0.863,	0.77,	0.3,	16.7,	117.1,	226.7,	1.21,	1.03,	0.166,	0.5,	0.63]
    letterDict["W"] = [0.98,	1.283,	0.867,	0.064,	0.62,	0.62,	0.3,	-0.33,	1.1,	1.1,	1.58,	0,	1,	0.63,	0,	0.93,	0,	0.777,	1.22,	0,	13.2,	118.4,	203.7,	1.14,	0.75,	0.158,	0.7,	0.84]
    letterDict["Y"] = [1.31,	1.283,	1.05,	0.114,	1.44,	0.99,	0.8,	-0.42,	1.9,	1.9,	0.86,	1.9,	1.31,	0.83,	0.97,	0.38,	0.654,	0.907,	1.09,	0.8,	13.9,	110,	195.6,	1.25,	1.05,	0.094,	0.7,	0.71]
    letterDict["V"] = [1.11,	0.654,	0.817,	0.028,	0.43,	0.75,	0.1,	-0.46,	0.7,	0.7,	0.64,	1.62,	0.87,	0.76,	0.24,	0.48,	0.167,	0.561,	0.88,	0.2,	17.2,	121.7,	220.3,	1.49,	0.47,	0.513,	0.76,	0.89]
    AACategoryLen = 28
    encodeX = np.zeros(AACategoryLen)
    for k in letterDict.keys():
        encodeX+=np.asarray(letterDict[k])
    
    encodeX = encodeX/20.0
    letterDict["X"] = list(encodeX)
    letterDict["-"] = list(np.zeros(AACategoryLen))
    
    probMatr = np.zeros((len(sampleSeq3DArr), 1, len(sampleSeq3DArr[0]), AACategoryLen))
    
    sampleNo = 0
    for sequence in sampleSeq3DArr:
        
        AANo = 0
        for AA in sequence:
            
            if not AA in letterDict:
                # probMatr[sampleNo][0][AANo] = np.full((1,AACategoryLen), 0)
                continue
            
            else:
                probMatr[sampleNo][0][AANo] = letterDict[AA]
            
            AANo += 1
        
        sampleNo += 1
    
    return probMatr


def convertSampleToAAindexClusterC(sampleSeq3DArr):
    '''
    Convertd the raw data to physico-chemical property(based on AAindex Cluster C)
    
    PARAMETER
    ---------
    sampleSeq3DArr: 3D numpy array
    	X denoted the unknow amino acid.
    
    probMatr: Probability Matrix for Samples. Shape (nb_samples, 1, nb_length_of_sequence, nb_AA)
    '''
    
    letterDict = {} # Total 24*20
    letterDict["A"] = [-0.7,	5.88,	6.69,	5.08,	10.88,	1.61,	10.17,	5.04,	0.077,	9.25,	7.99,	3.73,	-0.57,	8.6,	685,	5.3,	5.39,	-0.6,	5.74,	0,	29.22,	0.892,	0.34,	1.58]
    letterDict["R"] = [-0.91,	1.54,	6.65,	4.75,	6.01,	0.4,	1.21,	3.73,	0.051,	3.96,	5.86,	3.34,	-1.29,	4.9,	382,	2.6,	2.81,	-1.18,	1.92,	5,	26.37,	0.901,	-0.57,	1.14]
    letterDict["N"] = [1.28,	4.38,	4.49,	5.75,	5.75,	0.73,	1.36,	5.94,	0.043,	3.71,	4.33,	2.33,	0.02,	4.3,	397,	3,	7.31,	0.39,	5.25,	2,	38.3,	0.93,	-0.27,	0.77]
    letterDict["D"] = [-0.93,	1.7,	4.97,	5.96,	6.13,	0.75,	1.18,	5.26,	0.052,	3.89,	5.14,	2.23,	-1.54,	5.5,	400,	3.6,	3.07,	-1.36,	2.11,	2,	37.09,	0.932,	-0.56,	0.98]
    letterDict["C"] = [-0.41,	1.11,	1.7,	2.95,	0.69,	0.37,	1.48,	2.2,	0.02,	1.07,	1.81,	2.3,	-0.3,	2.9,	241,	1.3,	0.86,	-0.34,	1.03,	1,	50.7,	0.925,	-0.32,	1.04]
    letterDict["Q"] = [-0.71,	2.3,	5.39,	4.24,	4.68,	0.61,	1.57,	4.5,	0.041,	3.17,	3.98,	2.36,	-0.71,	3.9,	313,	2.4,	2.31,	-0.71,	2.3,	3,	44.02,	0.885,	-0.34,	1.24]
    letterDict["E"] = [-1.13,	2.6,	7.76,	6.04,	9.34,	1.5,	1.15,	6.07,	0.062,	4.8,	6.1,	3,	-1.17,	6,	427,	3.3,	2.7,	-1.16,	2.63,	3,	41.84,	0.933,	-0.43,	1.49]
    letterDict["G"] = [-0.12,	5.29,	6.32,	8.2,	7.72,	3.12,	8.87,	7.09,	0.074,	8.51,	6.91,	3.36,	-0.48,	8.4,	707,	4.8,	6.52,	-0.37,	5.66,	0,	23.71,	0.923,	0.48,	0.66]
    letterDict["H"] = [0.04,	2.33,	2.11,	2.1,	2.15,	0.46,	1.07,	2.99,	0.023,	1.88,	2.17,	1.55,	0.1,	2,	155,	1.4,	2.23,	0.08,	2.3,	3,	59.64,	0.894,	-0.19,	0.99]
    letterDict["I"] = [1.77,	8.78,	4.51,	4.95,	1.8,	1.61,	10.91,	4.32,	0.053,	6.47,	5.48,	2.52,	1.31,	4.5,	394,	3.1,	9.94,	1.44,	9.12,	2,	45,	0.872,	0.39,	1.09]
    letterDict["L"] = [1.02,	16.52,	8.23,	8.03,	8.03,	1.37,	16.22,	9.88,	0.091,	10.94,	9.16,	3.4,	2.16,	7.4,	581,	4.7,	12.64,	1.82,	15.36,	2,	48.03,	0.921,	0.52,	1.21]
    letterDict["K"] = [-0.4,	2.58,	8.36,	4.93,	6.11,	0.62,	1.04,	6.31,	0.059,	3.5,	6.01,	3.36,	-1.02,	6.6,	575,	4.1,	4.67,	-0.84,	3.2,	4,	57.1,	1.057,	-0.75,	1.27]
    letterDict["M"] = [0.86,	6,	2.46,	2.61,	3.79,	1.59,	4.12,	1.85,	0.024,	3.14,	2.5,	1.37,	2.55,	1.7,	132,	1.1,	3.68,	2.04,	5.3,	3,	69.32,	0.804,	0.47,	1.41]
    letterDict["F"] = [1.29,	6.58,	3.59,	4.36,	2.93,	1.24,	9.6,	3.72,	0.04,	6.36,	3.83,	1.94,	1.42,	3.6,	303,	2.3,	6.34,	1.38,	6.51,	4,	48.52,	0.914,	1.3,	1]
    letterDict["P"] = [-0.42,	5.29,	5.2,	4.84,	7.21,	0.67,	2.24,	6.22,	0.051,	4.36,	4.95,	3.18,	0.11,	5.2,	366,	2.5,	3.62,	-0.05,	4.79,	0,	36.13,	0.932,	-0.19,	1.46]
    letterDict["S"] = [0.14,	7.68,	7.4,	6.41,	7.25,	0.68,	5.38,	8.05,	0.069,	6.26,	6.84,	2.83,	0.3,	7,	593,	4.5,	7.24,	0.25,	7.55,	1,	32.4,	0.923,	-0.2,	1.05]
    letterDict["T"] = [-0.13,	8.38,	5.18,	5.87,	3.51,	0.92,	5.61,	5.2,	0.059,	5.66,	5.77,	2.63,	0.99,	6.1,	490,	3.7,	5.44,	0.66,	7.51,	1,	35.2,	0.934,	-0.04,	0.87]
    letterDict["W"] = [0.26,	2.89,	1.06,	2.31,	0.47,	1.63,	2.67,	2.1,	0.014,	2.22,	1.34,	1.15,	1.35,	1.3,	99,	0.8,	1.64,	1.02,	2.51,	5,	56.92,	0.803,	0.77,	1.23]
    letterDict["Y"] = [1.29,	3.51,	2.75,	4.55,	1.01,	0.67,	2.68,	3.32,	0.032,	3.28,	3.15,	1.76,	0.2,	3.4,	292,	2.3,	5.42,	0.53,	4.08,	5,	51.73,	0.837,	0.07,	0.68]
    letterDict["V"] = [-0.19,	4.66,	5.27,	6.07,	4.57,	1.3,	11.44,	6.19,	0.066,	7.55,	6.65,	2.53,	-0.79,	6.6,	553,	4.2,	6.18,	-0.6,	5.12,	1,	40.35,	0.913,	0.36,	0.88]
    AACategoryLen = 24
    encodeX = np.zeros(AACategoryLen)
    for k in letterDict.keys():
        encodeX+=np.asarray(letterDict[k])
    
    encodeX = encodeX/20.0
    letterDict["X"] = list(encodeX)
    letterDict["-"] = list(np.zeros(AACategoryLen))
    
    probMatr = np.zeros((len(sampleSeq3DArr), 1, len(sampleSeq3DArr[0]), AACategoryLen))
    
    sampleNo = 0
    for sequence in sampleSeq3DArr:
        
        AANo = 0
        for AA in sequence:
            
            if not AA in letterDict:
                # probMatr[sampleNo][0][AANo] = np.full((1,AACategoryLen), 0)
                continue
            
            else:
                probMatr[sampleNo][0][AANo] = letterDict[AA]
            
            AANo += 1
        
        sampleNo += 1
    
    return probMatr

def convertSampleToAAindexClusterB(sampleSeq3DArr):
    '''
    Convertd the raw data to physico-chemical property(based on AAindex Cluster C)
    
    PARAMETER
    ---------
    sampleSeq3DArr: 3D numpy array
    	X denoted the unknow amino acid.
    
    probMatr: Probability Matrix for Samples. Shape (nb_samples, 1, nb_length_of_sequence, nb_AA)
    '''
    
    letterDict = {} # Total 37*20
    letterDict["A"] = [-2.49,	2.01,	-0.1,	0.05,	1,	0.89,	-0.26,	-0.25,	1,	0.92,	0.9,	0.83,	0.86,	1.1,	0.9,	0.75,	-0.31,	0.75,	0.81,	0.86,	0.81,	0.84,	1,	0,	-2.7,	0.91,	0.98,	0.687,	0.9,	0.96,	0.86,	0.288,	0.79,	0.86,	0.86,	1.48,	0]
    letterDict["R"] = [2.55,	0.84,	0.19,	-0.11,	0.68,	1.06,	-0.09,	-0.02,	0.7,	0.93,	1.02,	0.93,	1.15,	0.93,	0.75,	0.9,	0.25,	0.79,	0.85,	0.97,	1.03,	1.04,	0.74,	1.1,	0.4,	0.99,	1.03,	0.59,	0.99,	0.67,	0.9,	0.362,	1.087,	0.98,	0.94,	1.02,	1]
    letterDict["N"] = [2.27,	0.03,	-0.89,	-0.4,	0.54,	0.67,	-0.34,	-0.77,	0.6,	0.6,	0.62,	0.89,	0.6,	1.57,	0.82,	1.21,	-0.53,	0.33,	0.62,	0.73,	0.81,	0.66,	0.75,	-2,	-4.2,	0.72,	0.66,	0.489,	0.76,	0.72,	0.66,	0.229,	0.832,	0.74,	0.74,	0.99,	0]
    letterDict["D"] = [8.86,	-2.05,	-0.89,	-0.11,	0.5,	0.71,	-0.55,	-1.01,	0.5,	0.48,	0.47,	0.54,	0.66,	1.41,	0.75,	0.85,	-0.54,	0.31,	0.71,	0.69,	0.71,	0.59,	0.89,	-2.6,	-4.4,	0.74,	0.74,	0.632,	0.72,	0.9,	0.38,	0.271,	0.53,	0.69,	0.72,	1.19,	0]
    letterDict["C"] = [-3.13,	1.98,	0.13,	0.36,	0.91,	1.04,	0.47,	0.13,	1.9,	1.16,	1.24,	1.19,	0.91,	1.05,	1.12,	1.11,	-0.06,	1.46,	1.17,	1.04,	1.12,	1.27,	0.99,	5.4,	3.7,	1.12,	1.01,	0.263,	0.74,	1.13,	0.87,	0.533,	1.268,	1.39,	1.17,	0.86,	0]
    letterDict["Q"] = [1.79,	1.02,	-0.04,	-0.67,	0.28,	1.06,	-0.33,	-0.12,	1,	0.95,	1.18,	1.1,	1.11,	0.81,	0.95,	0.65,	0.07,	0.75,	0.98,	1,	1.03,	1.02,	0.87,	2.4,	0.8,	0.9,	0.63,	0.527,	0.8,	1.18,	1.65,	0.327,	1.038,	0.89,	0.89,	1.42,	1]
    letterDict["E"] = [4.04,	0.93,	-0.34,	-0.35,	0.59,	0.72,	-0.75,	-0.62,	0.7,	0.61,	0.62,	0.37,	0.37,	1.4,	0.44,	0.55,	-0.52,	0.46,	0.53,	0.66,	0.59,	0.57,	0.37,	3.1,	-8.1,	0.41,	0.59,	0.669,	0.75,	0.33,	0.35,	0.262,	0.643,	0.66,	0.62,	1.43,	1]
    letterDict["G"] = [-0.56,	0.12,	-0.45,	0.14,	0.79,	0.87,	-0.56,	-0.72,	0.3,	0.61,	0.56,	0.75,	0.86,	1.3,	0.83,	0.74,	0.37,	0.83,	0.88,	0.89,	0.94,	0.94,	0.56,	-3.4,	-3.9,	0.91,	0.9,	0.67,	0.92,	0.9,	0.63,	0.312,	0.725,	0.7,	0.97,	0.46,	0]
    letterDict["H"] = [4.22,	-0.14,	-0.34,	0.02,	0.38,	1.04,	-0.04,	-0.16,	0.8,	0.93,	1.12,	0.87,	1.07,	0.85,	0.86,	0.9,	-0.32,	0.83,	0.92,	0.85,	0.85,	0.81,	0.36,	0.8,	-3,	1.01,	1.17,	0.594,	1.08,	0.87,	0.54,	0.2,	0.864,	1.06,	1.06,	1.27,	1]
    letterDict["I"] = [-10.87,	3.7,	0.95,	0.47,	2.6,	1.14,	0.94,	1.1,	4,	1.81,	1.54,	1.6,	1.17,	0.67,	1.59,	1.35,	0.57,	1.87,	1.48,	1.47,	1.47,	1.29,	1.75,	-0.1,	7.7,	1.29,	1.38,	0.564,	1.45,	1.54,	1.94,	0.411,	1.361,	1.31,	1.24,	1.12,	0]
    letterDict["L"] = [-7.16,	2.73,	0.32,	0.32,	1.42,	1.02,	0.25,	0.23,	2,	1.3,	1.26,	1.3,	1.28,	0.52,	1.24,	1.27,	0.09,	1.56,	1.24,	1.04,	1.03,	1.1,	1.53,	-3.7,	3.7,	1.23,	1.05,	0.541,	1.02,	1.26,	1.3,	0.4,	1.111,	1.01,	0.98,	1.33,	0]
    letterDict["K"] = [-9.97,	2.55,	-0.46,	-0.51,	0.59,	1,	-0.55,	-0.59,	0.7,	0.7,	0.74,	0.74,	1.01,	0.94,	0.75,	0.74,	-0.29,	0.66,	0.77,	0.77,	0.77,	0.86,	1.18,	-3.1,	-2.9,	0.86,	0.83,	0.407,	0.77,	0.81,	1,	0.265,	0.735,	0.77,	0.79,	1.36,	1]
    letterDict["M"] = [-4.96,	1.75,	0.43,	-0.1,	1.49,	1.41,	-0.05,	0.32,	1.9,	1.19,	1.09,	1.05,	1.15,	0.69,	0.94,	0.95,	0.29,	0.86,	1.05,	0.93,	0.96,	0.88,	1.4,	-2.1,	3.7,	0.96,	0.82,	0.328,	0.97,	1.29,	1.43,	0.375,	1.092,	1.06,	1.08,	1.41,	1]
    letterDict["F"] = [-6.64,	2.68,	0.36,	0.2,	1.3,	1.32,	0.2,	0.48,	3.1,	1.25,	1.23,	1.38,	1.34,	0.6,	1.41,	1.5,	0.24,	1.37,	1.2,	1.21,	1.13,	1.15,	1.26,	0.7,	3,	1.26,	1.23,	0.577,	1.32,	1.37,	1.5,	0.318,	1.052,	1.16,	1.16,	1.3,	1]
    letterDict["P"] = [5.19,	0.41,	-0.91,	-0.79,	0.35,	0.69,	-1.28,	-1.24,	0.2,	0.4,	0.42,	0.55,	0.61,	1.77,	0.46,	0.4,	-0.31,	0.52,	0.61,	0.68,	0.75,	0.8,	0.36,	7.4,	-6.6,	0.65,	0.73,	0.6,	0.64,	0.75,	0.66,	0.34,	1.249,	1.16,	1.22,	0.25,	0]
    letterDict["S"] = [-1.6,	1.47,	-0.12,	0.03,	0.7,	0.86,	-0.28,	-0.31,	0.9,	0.82,	0.87,	0.75,	0.91,	1.13,	0.7,	0.79,	0.11,	0.82,	0.92,	1.02,	1.02,	1.05,	0.65,	1.3,	-2.4,	0.93,	0.98,	0.692,	0.95,	0.77,	0.63,	0.354,	1.093,	1.09,	1.04,	0.89,	0]
    letterDict["T"] = [-4.75,	2.39,	0.49,	-0.15,	0.59,	1.15,	0.08,	0.17,	1.7,	1.12,	1.3,	1.19,	1.14,	0.88,	1.2,	0.75,	0.03,	1.36,	1.18,	1.27,	1.19,	1.2,	1.15,	0,	1.7,	1.05,	1.2,	0.713,	1.21,	1.23,	1.17,	0.388,	1.214,	1.24,	1.18,	0.81,	0]
    letterDict["W"] = [-17.84,	2.49,	0.34,	0.09,	0.89,	1.06,	0.22,	0.45,	2.2,	1.54,	1.75,	1.37,	1.13,	0.62,	1.28,	1.19,	0.15,	0.79,	1.18,	1.26,	1.24,	1.15,	0.84,	-3.4,	0.3,	1.15,	1.26,	0.632,	1.14,	1.13,	1.49,	0.231,	1.114,	1.17,	1.07,	1.27,	1.5]
    letterDict["Y"] = [9.25,	2.23,	0.42,	0.34,	1.08,	1.35,	0.53,	0.77,	2.8,	1.53,	1.68,	1.47,	1.37,	0.41,	1.45,	1.96,	0.29,	1.08,	1.23,	1.31,	1.35,	1.39,	1.41,	4.8,	3.3,	1.21,	1.23,	0.495,	1.25,	1.07,	1.07,	0.429,	1.34,	1.28,	1.25,	0.91,	1]
    letterDict["V"] = [-3.97,	3.5,	0.76,	0.58,	2.63,	1.66,	0.67,	0.69,	4,	1.81,	1.53,	1.7,	1.31,	0.58,	1.73,	1.79,	0.48,	2,	1.66,	1.43,	1.44,	1.56,	1.61,	2.7,	7.1,	1.58,	1.62,	0.529,	1.49,	1.41,	1.69,	0.495,	1.428,	1.4,	1.33,	0.93,	0]
    AACategoryLen = 37
    encodeX = np.zeros(AACategoryLen)
    for k in letterDict.keys():
        encodeX+=np.asarray(letterDict[k])
    
    encodeX = encodeX/20.0
    letterDict["X"] = list(encodeX)
    letterDict["-"] = list(np.zeros(AACategoryLen))
    
    probMatr = np.zeros((len(sampleSeq3DArr), 1, len(sampleSeq3DArr[0]), AACategoryLen))
    
    sampleNo = 0
    for sequence in sampleSeq3DArr:
        
        AANo = 0
        for AA in sequence:
            
            if not AA in letterDict:
                # probMatr[sampleNo][0][AANo] = np.full((1,AACategoryLen), 0)
                continue
            
            else:
                probMatr[sampleNo][0][AANo] = letterDict[AA]
            
            AANo += 1
        
        sampleNo += 1
    
    return probMatr

def convertSampleToAAindexClusterA(sampleSeq3DArr):
    '''
    Convertd the raw data to physico-chemical property(based on AAindex Cluster C)
    
    PARAMETER
    ---------
    sampleSeq3DArr: 3D numpy array
    	X denoted the unknow amino acid.
    
    probMatr: Probability Matrix for Samples. Shape (nb_samples, 1, nb_length_of_sequence, nb_AA)
    '''
    
    letterDict = {} # Total 118*20
    letterDict["A"] = [-0.062,	0.12,	-1.73,	0.06,	1.1,	-5,	0.7,	1.08,	1.071,	-0.19,	-2.5,	0.058,	-0.25,	-4.7,	-5.1,	0.91,	0.74,	0.22,	0.239,	1.8,	4.76,	0.93,	1,	0.87,	0.92,	0.135,	0.69,	0.52,	1,	1.09,	0.7,	0.946,	1,	0.85,	0.26,	0.29,	0.08,	1.8,	0.64,	0.68,	-0.43,	1.34,	-0.14,	0.72,	1.8,	-0.368,	1.55,	6.5,	1.2,	9.69,	0.4,	0,	1.4,	1.1,	-2.3,	0.18,	-0.08,	-0.3,	-0.23,	0.37,	0.66,	0.67,	0.93,	-3.3,	0.046,	0.64,	-3.7,	0.6,	-1,	0.65,	0.842,	0.74,	0.91,	-6.7,	0.77,	0.79,	-0.42,	-0.24,	1.1,	2.3,	0.33,	0.13,	0.31,	0.21,	0.01,	-0.27,	-0.14,	0.84,	0.78,	1.13,	0.8,	1.08,	8.249,	1,	0.076,	1.09,	1.194,	0.57,	1.45,	1.53,	1.36,	1.32,	1.3,	1.29,	1.33,	1.29,	1.19,	1.15,	1.43,	0.486,	1.32,	1.42,	2.3,	0.34,	1.42,	0.88,	1.29,	0.175]
    letterDict["R"] = [-0.167,	0.04,	2.52,	0.07,	1.5,	2.1,	0.8,	1.05,	1.033,	-0.07,	-1.2,	0.085,	0.12,	2,	2.6,	0.77,	1.05,	0.28,	0.211,	12.5,	4.3,	1.52,	1.4,	1.3,	0.9,	0.296,	0,	1.24,	1.18,	1.07,	1.1,	1.128,	0.52,	2.02,	-0.14,	-0.03,	-0.01,	1.3,	-0.1,	-0.22,	0.06,	0.91,	0.14,	1.33,	1,	-1.03,	0.2,	6.9,	1.25,	8.99,	1.2,	0,	2.1,	1,	0.4,	0.21,	0.05,	-0.09,	-0.2,	0.84,	0.95,	0.89,	1.01,	0,	0.291,	1.05,	1,	0.79,	0.3,	0.93,	0.936,	1.01,	1,	51.5,	0.88,	0.9,	-0.23,	-0.04,	0.95,	1.4,	0.1,	0.08,	0.18,	0.07,	-0.13,	-0.4,	0.21,	0.91,	1.06,	1.09,	0.96,	0.93,	8.274,	0.7,	0.106,	0.97,	0.795,	0.23,	1.15,	1.17,	1,	0.98,	0.93,	0.83,	0.79,	1,	1,	1.06,	1.18,	0.262,	1.04,	0.98,	-5.2,	0.22,	1.06,	0.99,	0.96,	0.083]
    letterDict["N"] = [0.166,	-0.1,	1.45,	0.161,	0,	4.2,	0.8,	0.85,	0.784,	0.17,	4.6,	0.091,	0.61,	3.9,	4.7,	1.32,	1.13,	0.42,	0.249,	-5.6,	3.64,	0.92,	0.9,	1.36,	1.57,	0.196,	1.52,	1.64,	0.87,	0.88,	1.5,	0.432,	0.35,	0.88,	-0.03,	-0.04,	-0.06,	0.9,	0.09,	-0.09,	0,	0.83,	-0.27,	1.38,	0.6,	0,	1.2,	7.5,	0.59,	8.8,	1.24,	4.14,	0.9,	1.2,	-4.1,	-0.03,	-0.08,	-0.12,	0.06,	0.97,	1.56,	1.86,	1.36,	5.4,	0.134,	1.56,	-0.6,	1.42,	-0.7,	1.45,	1.352,	1.46,	1.64,	20.1,	1.28,	1.25,	0.81,	0.45,	0.8,	-3.3,	-0.19,	-0.07,	-0.1,	-0.04,	-0.11,	0.71,	0.35,	1.48,	1.56,	1.06,	1.1,	1.05,	8.747,	1,	0.083,	1.14,	0.659,	-0.36,	0.64,	0.6,	0.89,	0.95,	0.9,	0.77,	0.72,	0.81,	0.94,	0.87,	0.64,	0.193,	0.74,	0.67,	0.3,	-0.33,	0.71,	1.02,	0.9,	0.09]
    letterDict["D"] = [-0.079,	0.01,	1.13,	0.147,	0.3,	3.1,	0.6,	0.85,	0.68,	-0.27,	0,	0.081,	0.6,	1.9,	3.1,	0.9,	1.32,	0.73,	0.171,	5.05,	5.69,	0.6,	1.4,	1.24,	1.22,	0.289,	2.42,	1.06,	1.39,	1.24,	1.4,	1.311,	0.44,	1.5,	0.15,	0.11,	0.04,	1,	0.33,	-0.02,	-0.31,	1.06,	-0.1,	1.04,	0.7,	2.06,	1.55,	7,	0.61,	9.6,	1.59,	2.15,	0.7,	0.4,	-4.4,	-0.32,	-0.24,	0.44,	0.34,	0.97,	1.46,	1.39,	1.22,	3.9,	0.105,	1.61,	-0.6,	1.24,	-1.2,	1.47,	1.366,	1.52,	1.4,	38.5,	1.41,	1.47,	0.95,	0.65,	0.65,	-4.4,	-0.44,	-0.71,	-0.81,	-0.58,	0.78,	0.54,	0.66,	1.28,	1.5,	0.94,	1.6,	0.86,	8.41,	1.7,	0.11,	0.77,	1.056,	-0.46,	0.91,	1,	1.04,	1.03,	1.02,	1,	0.97,	1.1,	1.07,	1,	0.92,	0.288,	0.97,	1.01,	7.4,	0.06,	1.01,	1.16,	1.04,	0.14]
    letterDict["C"] = [0.38,	-0.25,	-0.97,	0.149,	1.1,	4.4,	0.2,	0.95,	0.922,	0.42,	-4.7,	0.128,	0.18,	6.2,	3.8,	0.5,	0.53,	0.2,	0.22,	-16.5,	3.67,	1.08,	0.8,	0.83,	0.62,	0.159,	0,	0.94,	1.09,	1.04,	0.4,	0.481,	0.06,	0.9,	-0.15,	-0.05,	0.37,	0.7,	0.03,	-0.15,	0.19,	1.27,	-0.64,	1.01,	0,	4.53,	1.44,	7.7,	1.11,	8.35,	2.98,	0,	1.2,	1.6,	4.4,	-0.29,	-0.25,	0.03,	0.19,	0.84,	1.19,	1.34,	0.92,	-0.3,	0.128,	0.92,	4,	1.29,	2.1,	1.43,	1.032,	0.96,	0.93,	-8.4,	0.81,	0.79,	-0.18,	-0.38,	0.95,	6.1,	-0.03,	-0.09,	-0.26,	-0.12,	-0.31,	0,	-0.09,	0.69,	0.6,	1.32,	0,	1.22,	8.312,	1,	0.053,	0.5,	0.678,	-0.15,	0.7,	0.89,	0.82,	0.92,	0.92,	0.94,	0.93,	0.79,	0.95,	1.03,	0.94,	0.2,	0.7,	0.7,	0.8,	-0.18,	0.73,	1.14,	1.11,	0.074]
    letterDict["Q"] = [-0.025,	-0.03,	0.53,	0.074,	1.3,	0.4,	1.3,	0.95,	0.977,	-0.29,	-0.5,	0.098,	0.09,	-2,	0.2,	1.06,	0.77,	0.26,	0.26,	6.3,	4.54,	0.94,	1.4,	1.06,	0.66,	0.236,	1.44,	0.7,	1.13,	1.09,	1.1,	1.615,	0.44,	1.71,	-0.13,	0.26,	0.48,	1.3,	-0.23,	-0.15,	0.14,	1.13,	-0.11,	0.81,	1,	0.731,	1.13,	6,	1.22,	9.13,	0.5,	0,	1.6,	2.1,	1.2,	-0.27,	-0.28,	0.24,	0.47,	0.64,	0.98,	1.09,	0.83,	-0.4,	0.18,	0.84,	3.4,	0.92,	-0.1,	0.94,	0.998,	0.96,	0.94,	17.2,	0.98,	0.92,	-0.01,	0.01,	1,	2.7,	0.19,	0.12,	0.41,	0.13,	-0.13,	-0.08,	0.11,	1,	0.78,	0.93,	1.6,	0.95,	8.411,	1,	0.098,	0.83,	1.29,	0.15,	1.14,	1.27,	1.14,	1.1,	1.04,	1.1,	1.42,	1.07,	1.32,	1.43,	1.22,	0.418,	1.25,	1.11,	-0.7,	0.01,	1.02,	0.93,	1.27,	0.093]
    letterDict["E"] = [-0.184,	-0.02,	0.39,	0.056,	0.5,	-4.7,	1.6,	1.15,	0.97,	-0.22,	-4.4,	0.064,	-0.12,	-4.2,	-5.2,	0.53,	0.85,	0.08,	0.187,	12,	5.48,	0.73,	0.8,	0.91,	0.92,	0.184,	0.63,	0.59,	1.04,	1.14,	0.7,	0.698,	0.73,	1.79,	0.21,	0.28,	0.36,	0.8,	0.51,	0.44,	-0.41,	1.69,	-0.39,	0.75,	1.1,	1.77,	1.67,	7,	1.24,	9.67,	1.26,	0,	1.7,	0.8,	-5,	-0.25,	-0.19,	0.18,	0.28,	0.53,	0.74,	0.92,	1.05,	-1.8,	0.151,	0.8,	-4.3,	0.64,	-0.7,	0.75,	0.758,	0.95,	0.97,	34.3,	0.99,	1.02,	-0.09,	0.07,	1,	2.5,	0.21,	0.13,	-0.06,	-0.23,	0.09,	-0.12,	0.06,	0.78,	0.97,	1.2,	0.4,	1.09,	8.368,	1.7,	0.06,	0.92,	0.928,	0.26,	1.29,	1.63,	1.48,	1.44,	1.43,	1.54,	1.66,	1.49,	1.64,	1.37,	1.67,	0.538,	1.48,	1.51,	10.3,	0.2,	1.63,	1.01,	1.44,	0.135]
    letterDict["G"] = [-0.017,	-0.02,	-5.36,	0.102,	0.4,	5.7,	0.1,	0.55,	0.591,	0.17,	4.9,	0.152,	0.09,	5.7,	5.6,	1.61,	1.68,	0.58,	0.16,	0,	3.77,	0.78,	1.2,	1.69,	1.61,	0.051,	2.64,	1.64,	0.46,	0.27,	0.6,	0.36,	0.35,	1.54,	-0.37,	-0.67,	-0.02,	0.5,	-0.09,	-0.73,	-0.21,	0.47,	0.46,	1.35,	0.5,	-0.525,	0.59,	5.6,	0.42,	9.78,	1.89,	6.49,	0.2,	0.2,	-4.2,	-0.4,	-0.1,	-0.12,	0.14,	0.97,	1.56,	1.46,	1.45,	-1.2,	0,	1.63,	5.9,	1.38,	0.3,	1.53,	1.349,	1.56,	1.51,	-4.2,	1.64,	1.67,	1.24,	0.85,	0.6,	-8.3,	-0.46,	-0.39,	-0.42,	-0.15,	0.14,	1.14,	0.36,	1.76,	1.73,	0.83,	2,	0.85,	8.391,	1.3,	0.085,	1.25,	1.015,	-0.71,	0.53,	0.44,	0.63,	0.61,	0.63,	0.72,	0.58,	0.63,	0.6,	0.64,	0.46,	0.12,	0.59,	0.57,	-5.2,	-0.88,	0.5,	0.7,	0.56,	0.201]
    letterDict["H"] = [0.056,	-0.06,	1.74,	0.14,	1.5,	-0.3,	1.1,	1,	0.85,	0.17,	1.6,	0.054,	0.42,	-2.6,	-0.9,	1.08,	0.96,	0.14,	0.205,	-38.5,	2.84,	1.08,	1.2,	0.91,	0.39,	0.223,	0.22,	1.86,	0.71,	1.07,	1,	2.168,	0.6,	1.59,	0.1,	-0.26,	-0.45,	1,	-0.23,	-0.14,	0.21,	1.11,	-0.04,	0.76,	2.4,	0,	1.21,	8,	1.77,	9.17,	2.71,	0,	1.8,	3.4,	-2.5,	0.28,	0.29,	-0.2,	-0.22,	0.75,	0.95,	0.78,	0.96,	3,	0.23,	0.77,	-0.8,	0.95,	1.1,	0.96,	1.079,	0.95,	0.9,	12.6,	0.68,	0.81,	0.05,	-0.21,	0.85,	5.9,	0.27,	0.32,	0.51,	0.37,	-0.56,	0.18,	-0.31,	0.53,	0.83,	1.09,	0.96,	1.02,	8.415,	1,	0.047,	0.67,	0.611,	-0.05,	1.13,	1.03,	1.11,	1.31,	1.33,	1.29,	1.49,	1.33,	1.03,	0.95,	0.98,	0.4,	1.06,	1,	-2.8,	-0.09,	1.2,	1.87,	1.22,	0.125]
    letterDict["I"] = [-0.309,	-0.07,	-1.68,	0.043,	1.1,	-4.6,	1.4,	1.05,	1.14,	-0.34,	-3.3,	0.056,	-0.54,	-7,	-4.5,	0.36,	0.53,	0.22,	0.273,	12.4,	4.81,	1.74,	1.1,	0.27,	0.79,	0.173,	0.43,	0.87,	0.68,	0.97,	0.7,	1.283,	0.73,	0.67,	-0.03,	0,	0.09,	1.2,	-0.22,	-0.08,	0.29,	0.84,	0.16,	0.8,	1.3,	0.791,	1.27,	7,	0.98,	9.68,	1.31,	0,	0.4,	0.7,	6.7,	-0.03,	-0.01,	-0.07,	0.42,	0.37,	0.47,	0.59,	0.58,	-0.5,	0.186,	0.29,	-0.5,	0.67,	4,	0.57,	0.459,	0.47,	0.65,	-13,	0.51,	0.5,	-1.17,	-0.65,	1.1,	-0.5,	-0.33,	0,	-0.15,	0.31,	-0.09,	-0.74,	-0.51,	0.55,	0.4,	1.05,	0.85,	0.98,	8.195,	1,	0.034,	0.66,	0.603,	0,	1.23,	1.07,	1.08,	0.93,	0.87,	0.94,	0.99,	1.05,	1.12,	0.99,	1.04,	0.37,	1.01,	1.08,	-4,	-0.03,	1.12,	1.61,	0.97,	0.1]
    letterDict["L"] = [-0.264,	0.05,	-1.03,	0.061,	2.6,	-5.6,	1.9,	1.25,	1.14,	-0.22,	-2,	0.07,	-0.55,	-6.2,	-5.4,	0.77,	0.59,	0.19,	0.281,	-11,	4.79,	1.03,	0.9,	0.67,	0.5,	0.215,	0,	0.84,	1.01,	1.3,	0.5,	1.192,	1,	1.03,	-0.02,	0.47,	0.24,	1.2,	0.41,	0.61,	-0.1,	1.39,	-0.57,	0.63,	1.2,	1.07,	1.25,	6.5,	1.13,	9.6,	0.57,	0,	0.8,	0.7,	2.3,	0.62,	0.28,	-0.18,	-0.36,	0.53,	0.59,	0.46,	0.59,	-2.3,	0.186,	0.36,	-2.8,	0.7,	2,	0.56,	0.665,	0.5,	0.59,	-11.7,	0.58,	0.57,	-0.69,	-0.8,	1.25,	0.1,	0.57,	0.5,	0.56,	0.7,	-0.81,	-0.54,	-0.8,	0.49,	0.57,	1.13,	0.8,	1.04,	8.423,	1,	0.025,	0.44,	0.595,	0.48,	1.56,	1.32,	1.21,	1.31,	1.3,	1.23,	1.29,	1.31,	1.18,	1.22,	1.36,	0.42,	1.22,	1.21,	-2.1,	0.2,	1.29,	1.09,	1.3,	0.104]
    letterDict["K"] = [-0.371,	0.26,	1.41,	0.055,	0.8,	1,	2.2,	1.15,	0.939,	0,	-0.8,	0.095,	0.14,	2.8,	1,	1.27,	0.82,	0.27,	0.228,	14.6,	4.27,	1,	1.2,	0.66,	0.86,	0.17,	1.18,	1.49,	1.05,	1.2,	1.3,	1.203,	0.6,	0.88,	0.12,	-0.19,	-0.27,	1.1,	-0.17,	0.03,	0.33,	1.08,	0.04,	0.84,	1.4,	0,	1.2,	6.5,	1.83,	9.18,	0.87,	0,	1.9,	2,	-3.3,	0.41,	0.45,	0.06,	-0.15,	0.75,	1.01,	1.09,	0.91,	-1.2,	0.219,	1.13,	1.3,	1.1,	-0.9,	0.95,	1.045,	1.19,	0.82,	36.8,	0.96,	0.99,	0.09,	0.17,	1,	7.3,	0.23,	0.37,	0.47,	0.28,	-0.43,	0.45,	-0.14,	0.95,	1.01,	1.08,	0.94,	1.01,	8.408,	0.7,	0.115,	1.25,	1.06,	0.16,	1.27,	1.26,	1.22,	1.25,	1.23,	1.23,	1.03,	1.33,	1.27,	1.2,	1.27,	0.402,	1.13,	1.16,	-4.1,	-0.11,	1.24,	0.83,	1.23,	0.058]
    letterDict["M"] = [0.077,	0,	-0.27,	0.068,	1.7,	-4.8,	1,	1.15,	1.2,	-0.53,	-4.1,	0.055,	-0.47,	-4.8,	-5.3,	0.76,	0.85,	0.38,	0.253,	-10,	4.25,	1.31,	0.8,	0,	0.5,	0.239,	0.88,	0.52,	0.36,	0.55,	0,	0,	1,	1.17,	0,	0.27,	0.16,	1.5,	0.13,	0.39,	-0.01,	0.9,	0.24,	0.62,	2.7,	0.656,	1.37,	0,	1.57,	9.21,	0,	0,	1.3,	1,	2.3,	0.21,	0.11,	-0.44,	-0.19,	0.64,	0.6,	0.52,	0.6,	-4.3,	0.221,	0.51,	-1.6,	0.67,	1.8,	0.71,	0.668,	0.6,	0.58,	-14.2,	0.41,	0.51,	-0.86,	-0.71,	1.15,	3.5,	0.79,	0.63,	0.58,	0.61,	-0.49,	-0.76,	-0.56,	0.52,	0.3,	1.23,	0.39,	1.11,	8.418,	1,	0.082,	0.45,	0.831,	0.41,	1.83,	1.66,	1.45,	1.39,	1.32,	1.23,	1.4,	1.54,	1.49,	1.45,	1.53,	0.417,	1.47,	1.45,	-3.5,	0.43,	1.21,	1.71,	1.47,	0.054]
    letterDict["F"] = [0.074,	0.05,	1.3,	0.059,	1.9,	-1.8,	1.8,	1.1,	1.086,	-0.31,	-4.1,	0.065,	-0.29,	-3.7,	-2.4,	0.37,	0.44,	0.08,	0.234,	-34.5,	4.31,	1.51,	0.1,	0.47,	0.96,	0.087,	2.2,	1.04,	0.65,	0.8,	1.2,	0.963,	0.6,	0.85,	0.12,	0.24,	0.34,	1.3,	-0.03,	0.06,	0.25,	1.02,	0.08,	0.58,	1.9,	1.06,	0.4,	9.4,	1.1,	9.18,	1.27,	2.11,	0.3,	0.7,	2.6,	0.05,	0,	0.11,	-0.02,	0.53,	0.6,	0.3,	0.71,	0.8,	0.29,	0.62,	1.6,	1.05,	2.8,	0.72,	0.881,	0.66,	0.72,	-15.5,	0.59,	0.77,	-0.39,	-0.61,	1.1,	1.6,	0.48,	0.15,	0.1,	-0.06,	-0.2,	-0.47,	-0.25,	0.88,	0.67,	1.01,	1.2,	0.96,	8.228,	1,	0.041,	0.5,	0.377,	0.03,	1.2,	1.22,	1.05,	1.02,	1.09,	1.23,	1.15,	1.13,	1.02,	0.92,	1.19,	0.318,	1.1,	1.13,	-1.1,	0.15,	1.16,	1.52,	1.07,	0.104]
    letterDict["P"] = [-0.036,	-0.19,	0.88,	0.102,	0.1,	2.6,	0,	0.71,	0.659,	0.14,	5.8,	0.068,	0.89,	3.6,	3.5,	1.62,	1.69,	0.46,	0.165,	-86.2,	0,	1.37,	1.9,	1.54,	1.3,	0.151,	1.34,	1.58,	1.95,	1.78,	1.5,	2.093,	0.06,	1.47,	-0.08,	-0.34,	0.16,	0.3,	-0.43,	-0.76,	0.28,	0.48,	0.02,	1.43,	0.3,	-2.24,	0.21,	0,	0,	10.64,	0.38,	1.99,	0.2,	0,	-1.8,	-0.84,	-0.42,	0.77,	0.78,	0.97,	1.52,	1.58,	1.67,	6.5,	0.131,	2.04,	-6,	1.47,	0.4,	1.51,	1.385,	1.56,	1.66,	0.8,	1.91,	1.78,	1.77,	2.27,	0.1,	-24.4,	-1.86,	-1.4,	-1.33,	-1.03,	1.14,	1.4,	1.59,	1.47,	1.55,	0.82,	2.1,	0.91,	0,	13,	0.301,	2.96,	3.159,	-1.12,	0.21,	0.25,	0.52,	0.58,	0.63,	0.7,	0.49,	0.63,	0.68,	0.72,	0.49,	0.208,	0.57,	0.57,	8.1,	-0.81,	0.65,	0.87,	0.52,	0.136]
    letterDict["S"] = [0.47,	-0.19,	-1.63,	0.12,	0.4,	2.6,	0.6,	0.75,	0.76,	0.22,	2.5,	0.106,	0.24,	2.1,	3.2,	1.34,	1.49,	0.55,	0.236,	-7.5,	3.83,	0.97,	0.7,	1.08,	1.4,	0.01,	1.43,	0.93,	1.56,	1.2,	0.9,	0.523,	0.35,	1.5,	0.01,	-0.17,	-0.35,	0.6,	-0.1,	-0.26,	-0.23,	1.05,	-0.12,	1.34,	0.5,	-0.524,	1.01,	6.5,	0.96,	9.21,	0.92,	0,	1.6,	1.7,	-1.7,	-0.05,	0.07,	-0.09,	-0.29,	0.84,	1.43,	1.41,	1.25,	1.8,	0.062,	1.52,	1.5,	1.26,	-1.2,	1.46,	1.257,	1.43,	1.23,	-2.5,	1.32,	1.3,	0.63,	0.33,	0.75,	-1.9,	-0.23,	-0.28,	-0.49,	-0.28,	0.13,	0.4,	0.32,	1.29,	1.19,	1.01,	1.3,	0.95,	8.38,	1,	0.139,	1.21,	1.444,	-0.47,	0.48,	0.65,	0.74,	0.76,	0.78,	0.78,	0.83,	0.78,	0.81,	0.84,	0.7,	0.2,	0.77,	0.77,	-3.5,	-0.35,	0.71,	1.14,	0.82,	0.155]
    letterDict["T"] = [0.348,	-0.04,	-2.09,	0.086,	0.5,	0.3,	0.7,	0.75,	0.817,	0.1,	1.7,	0.079,	0.16,	0.6,	0,	0.87,	1.16,	0.49,	0.213,	-28,	3.87,	1.38,	0.8,	1.12,	1.11,	0.1,	0.28,	0.86,	1.23,	0.99,	2.1,	1.961,	0.44,	1.96,	-0.34,	-0.2,	-0.04,	1,	-0.07,	-0.1,	-0.26,	0.74,	0,	1.03,	0.5,	0,	0.55,	6.9,	0.75,	9.1,	1.38,	1.24,	0.9,	1,	1.3,	-0.16,	-0.33,	-0.27,	-0.3,	0.75,	0.96,	1.09,	1.08,	-0.7,	0.108,	0.98,	1.2,	1.05,	-0.5,	0.96,	1.055,	0.98,	1.04,	-5,	1.04,	0.97,	0.29,	0.13,	0.75,	-3.7,	-0.33,	-0.21,	-0.44,	-0.25,	-0.02,	-0.1,	0.21,	1.05,	1.09,	1.17,	0.6,	1.15,	8.236,	1,	0.108,	1.33,	1.172,	-0.54,	0.77,	0.86,	0.81,	0.79,	0.8,	0.87,	0.94,	0.77,	0.85,	0.97,	0.78,	0.272,	0.86,	0.83,	2.3,	-0.37,	0.78,	0.96,	0.82,	0.152]
    letterDict["W"] = [0.05,	-0.06,	3.65,	0.077,	3.1,	3.4,	0.4,	1.1,	1.107,	-0.15,	1.2,	0.167,	-0.44,	3.3,	2.9,	1.1,	1.59,	0.43,	0.183,	-33.7,	4.75,	1.12,	0.4,	1.24,	0.57,	0.166,	0,	0.16,	1.1,	1.03,	2.7,	1.925,	0.73,	0.83,	-0.01,	0.25,	-0.06,	1.5,	-0.02,	0.2,	0.15,	0.64,	-0.1,	0.87,	1.1,	1.6,	1.86,	0,	0.4,	9.44,	1.53,	0,	0.4,	0,	-1,	0.32,	0.36,	-0.09,	-0.18,	0.97,	0.96,	0.48,	0.68,	-0.8,	0.409,	0.48,	6.5,	1.23,	3,	0.9,	0.881,	0.6,	0.67,	-7.9,	0.76,	0.79,	-0.37,	-0.44,	1.1,	-0.9,	0.15,	0.02,	0.14,	0.21,	-0.2,	-0.46,	-0.17,	0.88,	0.74,	1.32,	0,	1.17,	8.094,	1,	0.013,	0.62,	0.452,	-0.1,	1.17,	1.05,	0.97,	0.97,	1.03,	1.06,	1.33,	1.18,	1.18,	1.11,	1.01,	0.462,	1.02,	1.08,	-0.9,	0.07,	1.05,	1.96,	0.99,	0.092]
    letterDict["Y"] = [0.22,	-0.14,	2.32,	0.082,	0.6,	2.9,	1.1,	1.1,	1.02,	-0.02,	-0.6,	0.125,	-0.19,	3.8,	3.2,	1.24,	1.01,	0.46,	0.193,	-10,	4.3,	1.65,	0.9,	0.54,	1.78,	0.066,	1.53,	0.96,	0.87,	0.69,	0.5,	0.802,	0.44,	1.34,	-0.29,	-0.3,	-0.2,	0.8,	-0.38,	-0.04,	0.09,	0.73,	0.18,	1.35,	1.3,	4.91,	1.08,	6.8,	0.73,	9.11,	1.79,	1.9,	0.3,	1.2,	4,	0.11,	0,	-0.25,	0.07,	0.84,	1.14,	1.23,	0.98,	3.1,	0.298,	1.08,	1.3,	1.35,	2.1,	1.12,	1.101,	1.14,	0.92,	2.9,	1.05,	0.93,	-0.41,	-0.49,	1.1,	-0.6,	-0.19,	-0.1,	-0.08,	0.16,	0.1,	-0.05,	-0.35,	1.28,	1.14,	0.88,	1.8,	0.8,	8.183,	1,	0.065,	0.94,	0.816,	-0.35,	0.74,	0.7,	0.79,	0.73,	0.71,	0.63,	0.49,	0.71,	0.77,	0.72,	0.69,	0.161,	0.72,	0.69,	-3.7,	-0.31,	0.67,	1.68,	0.72,	0.081]
    letterDict["V"] = [-0.212,	-0.03,	-2.53,	0.062,	1.5,	-6,	1.3,	0.95,	0.95,	-0.33,	-3.5,	0.053,	-0.45,	-6.2,	-6.3,	0.52,	0.59,	0.08,	0.255,	5.63,	4.86,	1.7,	0.6,	0.69,	0.5,	0.285,	0.14,	0.32,	0.58,	0.77,	1,	0.409,	0.82,	0.89,	0.02,	-0.01,	0.18,	1.2,	-0.01,	0.12,	-0.1,	1.18,	0.29,	0.83,	0.4,	0.401,	0.64,	7,	1.25,	9.62,	0.95,	0,	0.7,	0.7,	6.8,	0.06,	-0.13,	-0.06,	0.29,	0.37,	0.5,	0.42,	0.62,	-3.5,	0.14,	0.43,	-4.6,	0.48,	1.4,	0.55,	0.643,	0.59,	0.6,	-10.9,	0.47,	0.46,	-1.32,	-0.99,	0.95,	2.3,	0.24,	0.17,	-0.01,	0,	-0.11,	-0.86,	-0.7,	0.51,	0.44,	1.13,	0.8,	1.03,	8.436,	1,	0.048,	0.56,	0.64,	0.31,	1.1,	0.93,	0.94,	0.93,	0.95,	0.97,	0.96,	0.81,	0.74,	0.82,	0.98,	0.379,	1.05,	1.06,	-4.4,	0.13,	0.99,	1.56,	0.91,	0.096]
    AACategoryLen = 118
    encodeX = np.zeros(AACategoryLen)
    for k in letterDict.keys():
        encodeX+=np.asarray(letterDict[k])
    
    encodeX = encodeX/20.0
    letterDict["X"] = list(encodeX)
    letterDict["-"] = list(np.zeros(AACategoryLen))
    
    probMatr = np.zeros((len(sampleSeq3DArr), 1, len(sampleSeq3DArr[0]), AACategoryLen))
    
    sampleNo = 0
    for sequence in sampleSeq3DArr:
        
        AANo = 0
        for AA in sequence:
            
            if not AA in letterDict:
                # probMatr[sampleNo][0][AANo] = np.full((1,AACategoryLen), 0)
                continue
            
            else:
                probMatr[sampleNo][0][AANo] = letterDict[AA]
            
            AANo += 1
        
        sampleNo += 1
    
    return probMatr

def convertSampleToDoubleVec(sampleSeq3DArr, nb_neibor):
    letterDict = {}
    letterDict["A"] = 0
    letterDict["C"] = 1
    letterDict["D"] = 2
    letterDict["E"] = 3
    letterDict["F"] = 4
    letterDict["G"] = 5
    letterDict["H"] = 6
    letterDict["I"] = 7
    letterDict["K"] = 8
    letterDict["L"] = 9
    letterDict["M"] = 10
    letterDict["N"] = 11
    letterDict["P"] = 12
    letterDict["Q"] = 13
    letterDict["R"] = 14
    letterDict["S"] = 15
    letterDict["T"] = 16
    letterDict["V"] = 17
    letterDict["W"] = 18
    letterDict["Y"] = 19
    
    
    double_letter_dict = {}
    for key_row in letterDict:
        for key_col in letterDict:
            idx_row = letterDict[key_row]
            idx_col = letterDict[key_col]
            
            final_key = key_row    + key_col
            final_idx = idx_row*20 + idx_col
            
            double_letter_dict[final_key] = final_idx
    
    
    probMatr = np.zeros((len(sampleSeq3DArr), 1, len(sampleSeq3DArr[0])-nb_neibor, len(double_letter_dict)))
    
    
    sampleNo = 0
    for sequence in sampleSeq3DArr:
    
        nb_sub_AA   = 0
        sequence = sequence.tolist()
        for idx in range(len(sequence)-nb_neibor):
            
            sub_AA = ("").join( sequence[idx:idx+nb_neibor+1] )
            
            if sub_AA in double_letter_dict:
                index = double_letter_dict[sub_AA]
                probMatr[sampleNo][0][nb_sub_AA][index] = 1
            print(sub_AA)
            break
            nb_sub_AA += 1
        break
        sampleNo += 1
    
    
    return probMatr

def convertRawToXY(rawDataFrame, refMatrFileName="", nb_windows=3, codingMode=0):#rawDataFrame is numpy.ndarray
    """
    convertd the raw data to probability matrix and target array 
    
    
    #Output:
    probMatr: Probability Matrix for Samples. Shape (nb_samples, 1, nb_length_of_sequence, nb_AA)
    targetArr: Target. Shape (nb_samples)
    """
    
    
    #rawDataFrame = pd.read_table(fileName, sep='\t', header=None).values
    
    targetList = rawDataFrame[:, 0]
    targetArr = kutils.to_categorical(targetList)
    
    sampleSeq3DArr = rawDataFrame[:, 1:]
    
    if codingMode == 0:
        probMatr = convertSampleToProbMatr(sampleSeq3DArr)
    elif codingMode == 1:
        probMatr = convertSampleToVector2DList(sampleSeq3DArr, nb_windows, refMatrFileName)
    elif codingMode == 2:
        probMatr = convertSampleToDoubleVec(sampleSeq3DArr, 1)
    elif codingMode == 3:
        probMatr = convertSampleToPhysicsVector(sampleSeq3DArr)
    elif codingMode == 4:
        probMatr = convertSampleToPhysicsVector_2(sampleSeq3DArr)
    elif codingMode == 41:
        probMatr = convertSampleToPhysicsVector_3(sampleSeq3DArr)
    elif codingMode == 42:
        probMatr = convertSampleToPhysicsVector_pca(sampleSeq3DArr)
    elif codingMode==43:
        probMatr = convertSampleToAAindexforUbiVector(sampleSeq3DArr)
    elif codingMode == 9:
        probMatr = convertSampleToAAindexClusterO(sampleSeq3DArr)
    elif codingMode == 10:
        probMatr = convertSampleToAAindexClusterP(sampleSeq3DArr)
    elif codingMode == 11:
        probMatr = convertSampleToAAindexClusterH(sampleSeq3DArr)
    elif codingMode == 12:
        probMatr = convertSampleToAAindexClusterC(sampleSeq3DArr)
    elif codingMode == 13:
        probMatr = convertSampleToAAindexClusterB(sampleSeq3DArr)
    elif codingMode == 14:
        probMatr = convertSampleToAAindexClusterA(sampleSeq3DArr)
    
    return probMatr, targetArr
    


def convertRawToIndex(rawDataFrame):
	#rawDataFrame = pd.read_table(fileName, sep='\t', header=None).values
	
	targetList = rawDataFrame[:, 0]
	targetArr = kutils.to_categorical(targetList)
	
	sampleSeq3DArr = rawDataFrame[:, 1:]
	
	index = convertSampleToIndex(sampleSeq3DArr)
	
	
	return index, targetArr
	


def convertRawToX(fileName, refMatrFileName="", nb_windows=3, codingMode=0):
	"""
	convertd the raw data to probability matrix
	
	
	#Output:
	probMatr: Probability Matrix for Samples. Shape (nb_samples, 1, nb_length_of_sequence, nb_AA)
	"""
	
	
	rawDataFrame = pd.read_table(fileName, sep='\t', header=None).values
	
	sampleSeq3DArr = rawDataFrame[:, 0:]
	
	if codingMode == 0:
		probMatr = convertSampleToProbMatr(sampleSeq3DArr)
	elif codingMode == 1:
		probMatr = DProcess.convertSampleToVector2DList(sampleSeq3DArr, nb_windows, refMatrFileName)
	
	
	return probMatr
